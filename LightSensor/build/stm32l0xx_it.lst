ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccArpExM.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l0xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	NMI_Handler:
  25              	.LFB47:
  26              		.file 1 "Core/Src/stm32l0xx_it.c"
   1:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32l0xx_it.c **** /**
   3:Core/Src/stm32l0xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32l0xx_it.c ****   * @file    stm32l0xx_it.c
   5:Core/Src/stm32l0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32l0xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32l0xx_it.c ****   * @attention
   8:Core/Src/stm32l0xx_it.c ****   *
   9:Core/Src/stm32l0xx_it.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32l0xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32l0xx_it.c ****   *
  12:Core/Src/stm32l0xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32l0xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32l0xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32l0xx_it.c ****   *
  16:Core/Src/stm32l0xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32l0xx_it.c ****   */
  18:Core/Src/stm32l0xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32l0xx_it.c **** 
  20:Core/Src/stm32l0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32l0xx_it.c **** #include "main.h"
  22:Core/Src/stm32l0xx_it.c **** #include "stm32l0xx_it.h"
  23:Core/Src/stm32l0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32l0xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32l0xx_it.c **** 
  27:Core/Src/stm32l0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32l0xx_it.c **** 
  30:Core/Src/stm32l0xx_it.c **** /* USER CODE END TD */
  31:Core/Src/stm32l0xx_it.c **** 
  32:Core/Src/stm32l0xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccArpExM.s 			page 2


  33:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32l0xx_it.c **** 
  35:Core/Src/stm32l0xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32l0xx_it.c **** 
  37:Core/Src/stm32l0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32l0xx_it.c **** 
  40:Core/Src/stm32l0xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32l0xx_it.c **** 
  42:Core/Src/stm32l0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32l0xx_it.c **** 
  45:Core/Src/stm32l0xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32l0xx_it.c **** 
  47:Core/Src/stm32l0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32l0xx_it.c **** 
  50:Core/Src/stm32l0xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32l0xx_it.c **** 
  52:Core/Src/stm32l0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32l0xx_it.c **** 
  55:Core/Src/stm32l0xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32l0xx_it.c **** 
  57:Core/Src/stm32l0xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32l0xx_it.c **** extern UART_HandleTypeDef huart2;
  59:Core/Src/stm32l0xx_it.c **** extern TIM_HandleTypeDef htim2;
  60:Core/Src/stm32l0xx_it.c **** 
  61:Core/Src/stm32l0xx_it.c **** /* USER CODE BEGIN EV */
  62:Core/Src/stm32l0xx_it.c **** 
  63:Core/Src/stm32l0xx_it.c **** /* USER CODE END EV */
  64:Core/Src/stm32l0xx_it.c **** 
  65:Core/Src/stm32l0xx_it.c **** /******************************************************************************/
  66:Core/Src/stm32l0xx_it.c **** /*           Cortex-M0+ Processor Interruption and Exception Handlers          */
  67:Core/Src/stm32l0xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32l0xx_it.c **** /**
  69:Core/Src/stm32l0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Core/Src/stm32l0xx_it.c ****   */
  71:Core/Src/stm32l0xx_it.c **** void NMI_Handler(void)
  72:Core/Src/stm32l0xx_it.c **** {
  27              		.loc 1 72 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  39              	.L2:
  73:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  74:Core/Src/stm32l0xx_it.c **** 
  75:Core/Src/stm32l0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccArpExM.s 			page 3


  77:Core/Src/stm32l0xx_it.c ****   while (1)
  40              		.loc 1 77 9 discriminator 1
  41 0004 FEE7     		b	.L2
  42              		.cfi_endproc
  43              	.LFE47:
  45              		.section	.text.HardFault_Handler,"ax",%progbits
  46              		.align	1
  47              		.global	HardFault_Handler
  48              		.syntax unified
  49              		.code	16
  50              		.thumb_func
  52              	HardFault_Handler:
  53              	.LFB48:
  78:Core/Src/stm32l0xx_it.c ****   {
  79:Core/Src/stm32l0xx_it.c ****   }
  80:Core/Src/stm32l0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  81:Core/Src/stm32l0xx_it.c **** }
  82:Core/Src/stm32l0xx_it.c **** 
  83:Core/Src/stm32l0xx_it.c **** /**
  84:Core/Src/stm32l0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  85:Core/Src/stm32l0xx_it.c ****   */
  86:Core/Src/stm32l0xx_it.c **** void HardFault_Handler(void)
  87:Core/Src/stm32l0xx_it.c **** {
  54              		.loc 1 87 1
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58 0000 80B5     		push	{r7, lr}
  59              	.LCFI2:
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 00AF     		add	r7, sp, #0
  64              	.LCFI3:
  65              		.cfi_def_cfa_register 7
  66              	.L4:
  88:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  89:Core/Src/stm32l0xx_it.c **** 
  90:Core/Src/stm32l0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  91:Core/Src/stm32l0xx_it.c ****   while (1)
  67              		.loc 1 91 9 discriminator 1
  68 0004 FEE7     		b	.L4
  69              		.cfi_endproc
  70              	.LFE48:
  72              		.section	.text.SVC_Handler,"ax",%progbits
  73              		.align	1
  74              		.global	SVC_Handler
  75              		.syntax unified
  76              		.code	16
  77              		.thumb_func
  79              	SVC_Handler:
  80              	.LFB49:
  92:Core/Src/stm32l0xx_it.c ****   {
  93:Core/Src/stm32l0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  94:Core/Src/stm32l0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  95:Core/Src/stm32l0xx_it.c ****   }
  96:Core/Src/stm32l0xx_it.c **** }
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccArpExM.s 			page 4


  97:Core/Src/stm32l0xx_it.c **** 
  98:Core/Src/stm32l0xx_it.c **** /**
  99:Core/Src/stm32l0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 100:Core/Src/stm32l0xx_it.c ****   */
 101:Core/Src/stm32l0xx_it.c **** void SVC_Handler(void)
 102:Core/Src/stm32l0xx_it.c **** {
  81              		.loc 1 102 1
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85 0000 80B5     		push	{r7, lr}
  86              	.LCFI4:
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 00AF     		add	r7, sp, #0
  91              	.LCFI5:
  92              		.cfi_def_cfa_register 7
 103:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 104:Core/Src/stm32l0xx_it.c **** 
 105:Core/Src/stm32l0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 106:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 107:Core/Src/stm32l0xx_it.c **** 
 108:Core/Src/stm32l0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 109:Core/Src/stm32l0xx_it.c **** }
  93              		.loc 1 109 1
  94 0004 C046     		nop
  95 0006 BD46     		mov	sp, r7
  96              		@ sp needed
  97 0008 80BD     		pop	{r7, pc}
  98              		.cfi_endproc
  99              	.LFE49:
 101              		.section	.text.PendSV_Handler,"ax",%progbits
 102              		.align	1
 103              		.global	PendSV_Handler
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 108              	PendSV_Handler:
 109              	.LFB50:
 110:Core/Src/stm32l0xx_it.c **** 
 111:Core/Src/stm32l0xx_it.c **** /**
 112:Core/Src/stm32l0xx_it.c ****   * @brief This function handles Pendable request for system service.
 113:Core/Src/stm32l0xx_it.c ****   */
 114:Core/Src/stm32l0xx_it.c **** void PendSV_Handler(void)
 115:Core/Src/stm32l0xx_it.c **** {
 110              		.loc 1 115 1
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114 0000 80B5     		push	{r7, lr}
 115              	.LCFI6:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 00AF     		add	r7, sp, #0
 120              	.LCFI7:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccArpExM.s 			page 5


 121              		.cfi_def_cfa_register 7
 116:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 117:Core/Src/stm32l0xx_it.c **** 
 118:Core/Src/stm32l0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 119:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 120:Core/Src/stm32l0xx_it.c **** 
 121:Core/Src/stm32l0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 122:Core/Src/stm32l0xx_it.c **** }
 122              		.loc 1 122 1
 123 0004 C046     		nop
 124 0006 BD46     		mov	sp, r7
 125              		@ sp needed
 126 0008 80BD     		pop	{r7, pc}
 127              		.cfi_endproc
 128              	.LFE50:
 130              		.section	.text.SysTick_Handler,"ax",%progbits
 131              		.align	1
 132              		.global	SysTick_Handler
 133              		.syntax unified
 134              		.code	16
 135              		.thumb_func
 137              	SysTick_Handler:
 138              	.LFB51:
 123:Core/Src/stm32l0xx_it.c **** 
 124:Core/Src/stm32l0xx_it.c **** /**
 125:Core/Src/stm32l0xx_it.c ****   * @brief This function handles System tick timer.
 126:Core/Src/stm32l0xx_it.c ****   */
 127:Core/Src/stm32l0xx_it.c **** void SysTick_Handler(void)
 128:Core/Src/stm32l0xx_it.c **** {
 139              		.loc 1 128 1
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143 0000 80B5     		push	{r7, lr}
 144              	.LCFI8:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 7, -8
 147              		.cfi_offset 14, -4
 148 0002 00AF     		add	r7, sp, #0
 149              	.LCFI9:
 150              		.cfi_def_cfa_register 7
 129:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 130:Core/Src/stm32l0xx_it.c **** 
 131:Core/Src/stm32l0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 132:Core/Src/stm32l0xx_it.c **** 
 133:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 134:Core/Src/stm32l0xx_it.c **** 
 135:Core/Src/stm32l0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 136:Core/Src/stm32l0xx_it.c **** }
 151              		.loc 1 136 1
 152 0004 C046     		nop
 153 0006 BD46     		mov	sp, r7
 154              		@ sp needed
 155 0008 80BD     		pop	{r7, pc}
 156              		.cfi_endproc
 157              	.LFE51:
 159              		.section	.text.TIM2_IRQHandler,"ax",%progbits
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccArpExM.s 			page 6


 160              		.align	1
 161              		.global	TIM2_IRQHandler
 162              		.syntax unified
 163              		.code	16
 164              		.thumb_func
 166              	TIM2_IRQHandler:
 167              	.LFB52:
 137:Core/Src/stm32l0xx_it.c **** 
 138:Core/Src/stm32l0xx_it.c **** /******************************************************************************/
 139:Core/Src/stm32l0xx_it.c **** /* STM32L0xx Peripheral Interrupt Handlers                                    */
 140:Core/Src/stm32l0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 141:Core/Src/stm32l0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 142:Core/Src/stm32l0xx_it.c **** /* please refer to the startup file (startup_stm32l0xx.s).                    */
 143:Core/Src/stm32l0xx_it.c **** /******************************************************************************/
 144:Core/Src/stm32l0xx_it.c **** 
 145:Core/Src/stm32l0xx_it.c **** /**
 146:Core/Src/stm32l0xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 147:Core/Src/stm32l0xx_it.c ****   */
 148:Core/Src/stm32l0xx_it.c **** void TIM2_IRQHandler(void)
 149:Core/Src/stm32l0xx_it.c **** {
 168              		.loc 1 149 1
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 1, uses_anonymous_args = 0
 172 0000 80B5     		push	{r7, lr}
 173              	.LCFI10:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
 177 0002 00AF     		add	r7, sp, #0
 178              	.LCFI11:
 179              		.cfi_def_cfa_register 7
 150:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 151:Core/Src/stm32l0xx_it.c **** 
 152:Core/Src/stm32l0xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 153:Core/Src/stm32l0xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 180              		.loc 1 153 3
 181 0004 034B     		ldr	r3, .L9
 182 0006 1800     		movs	r0, r3
 183 0008 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 154:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 155:Core/Src/stm32l0xx_it.c **** 
 156:Core/Src/stm32l0xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 157:Core/Src/stm32l0xx_it.c **** }
 184              		.loc 1 157 1
 185 000c C046     		nop
 186 000e BD46     		mov	sp, r7
 187              		@ sp needed
 188 0010 80BD     		pop	{r7, pc}
 189              	.L10:
 190 0012 C046     		.align	2
 191              	.L9:
 192 0014 00000000 		.word	htim2
 193              		.cfi_endproc
 194              	.LFE52:
 196              		.section	.text.USART2_IRQHandler,"ax",%progbits
 197              		.align	1
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccArpExM.s 			page 7


 198              		.global	USART2_IRQHandler
 199              		.syntax unified
 200              		.code	16
 201              		.thumb_func
 203              	USART2_IRQHandler:
 204              	.LFB53:
 158:Core/Src/stm32l0xx_it.c **** 
 159:Core/Src/stm32l0xx_it.c **** /**
 160:Core/Src/stm32l0xx_it.c ****   * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI li
 161:Core/Src/stm32l0xx_it.c ****   */
 162:Core/Src/stm32l0xx_it.c **** void USART2_IRQHandler(void)
 163:Core/Src/stm32l0xx_it.c **** {
 205              		.loc 1 163 1
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 0000 80B5     		push	{r7, lr}
 210              	.LCFI12:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 00AF     		add	r7, sp, #0
 215              	.LCFI13:
 216              		.cfi_def_cfa_register 7
 164:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 165:Core/Src/stm32l0xx_it.c **** 
 166:Core/Src/stm32l0xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 167:Core/Src/stm32l0xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 217              		.loc 1 167 3
 218 0004 034B     		ldr	r3, .L12
 219 0006 1800     		movs	r0, r3
 220 0008 FFF7FEFF 		bl	HAL_UART_IRQHandler
 168:Core/Src/stm32l0xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 169:Core/Src/stm32l0xx_it.c **** 
 170:Core/Src/stm32l0xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 171:Core/Src/stm32l0xx_it.c **** }
 221              		.loc 1 171 1
 222 000c C046     		nop
 223 000e BD46     		mov	sp, r7
 224              		@ sp needed
 225 0010 80BD     		pop	{r7, pc}
 226              	.L13:
 227 0012 C046     		.align	2
 228              	.L12:
 229 0014 00000000 		.word	huart2
 230              		.cfi_endproc
 231              	.LFE53:
 233              		.text
 234              	.Letext0:
 235              		.file 2 "d:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 236              		.file 3 "d:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 237              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l053xx.h"
 238              		.file 5 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 239              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 240              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim.h"
 241              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccArpExM.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l0xx_it.c
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:18     .text.NMI_Handler:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:24     .text.NMI_Handler:00000000 NMI_Handler
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:46     .text.HardFault_Handler:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:52     .text.HardFault_Handler:00000000 HardFault_Handler
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:73     .text.SVC_Handler:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:79     .text.SVC_Handler:00000000 SVC_Handler
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:102    .text.PendSV_Handler:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:108    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:131    .text.SysTick_Handler:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:137    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:160    .text.TIM2_IRQHandler:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:166    .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:192    .text.TIM2_IRQHandler:00000014 $d
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:197    .text.USART2_IRQHandler:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:203    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
C:\Users\lidka\AppData\Local\Temp\ccArpExM.s:229    .text.USART2_IRQHandler:00000014 $d

UNDEFINED SYMBOLS
HAL_TIM_IRQHandler
htim2
HAL_UART_IRQHandler
huart2

ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l0xx_hal_cortex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.__NVIC_EnableIRQ,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  23              	__NVIC_EnableIRQ:
  24              	.LFB25:
  25              		.file 1 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.6
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 2


  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 3


  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 4


 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 5


 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 6


 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 7


 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 8


 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 9


 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 10


 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 11


 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 12


 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 13


 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 14


 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
  26              		.loc 1 742 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 0200     		movs	r2, r0
  42 0008 FB1D     		adds	r3, r7, #7
  43 000a 1A70     		strb	r2, [r3]
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
  44              		.loc 1 743 6
  45 000c FB1D     		adds	r3, r7, #7
  46 000e 1B78     		ldrb	r3, [r3]
  47 0010 7F2B     		cmp	r3, #127
  48 0012 09D8     		bhi	.L3
 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  49              		.loc 1 745 58
  50 0014 FB1D     		adds	r3, r7, #7
  51 0016 1B78     		ldrb	r3, [r3]
  52 0018 1A00     		movs	r2, r3
  53 001a 1F23     		movs	r3, #31
  54 001c 1A40     		ands	r2, r3
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 15


  55              		.loc 1 745 9
  56 001e 044B     		ldr	r3, .L4
  57              		.loc 1 745 22
  58 0020 0121     		movs	r1, #1
  59 0022 9140     		lsls	r1, r1, r2
  60 0024 0A00     		movs	r2, r1
  61              		.loc 1 745 20
  62 0026 1A60     		str	r2, [r3]
  63              	.L3:
 746:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 747:Drivers/CMSIS/Include/core_cm0plus.h **** }
  64              		.loc 1 747 1
  65 0028 C046     		nop
  66 002a BD46     		mov	sp, r7
  67 002c 02B0     		add	sp, sp, #8
  68              		@ sp needed
  69 002e 80BD     		pop	{r7, pc}
  70              	.L5:
  71              		.align	2
  72              	.L4:
  73 0030 00E100E0 		.word	-536813312
  74              		.cfi_endproc
  75              	.LFE25:
  77              		.section	.text.__NVIC_DisableIRQ,"ax",%progbits
  78              		.align	1
  79              		.syntax unified
  80              		.code	16
  81              		.thumb_func
  83              	__NVIC_DisableIRQ:
  84              	.LFB27:
 748:Drivers/CMSIS/Include/core_cm0plus.h **** 
 749:Drivers/CMSIS/Include/core_cm0plus.h **** 
 750:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 751:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 752:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 758:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 759:Drivers/CMSIS/Include/core_cm0plus.h **** {
 760:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 761:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 764:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 766:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 768:Drivers/CMSIS/Include/core_cm0plus.h **** }
 769:Drivers/CMSIS/Include/core_cm0plus.h **** 
 770:Drivers/CMSIS/Include/core_cm0plus.h **** 
 771:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 772:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 773:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 16


 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 776:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 777:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 778:Drivers/CMSIS/Include/core_cm0plus.h **** {
  85              		.loc 1 778 1
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 8
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89 0000 80B5     		push	{r7, lr}
  90              	.LCFI3:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 82B0     		sub	sp, sp, #8
  95              	.LCFI4:
  96              		.cfi_def_cfa_offset 16
  97 0004 00AF     		add	r7, sp, #0
  98              	.LCFI5:
  99              		.cfi_def_cfa_register 7
 100 0006 0200     		movs	r2, r0
 101 0008 FB1D     		adds	r3, r7, #7
 102 000a 1A70     		strb	r2, [r3]
 779:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 103              		.loc 1 779 6
 104 000c FB1D     		adds	r3, r7, #7
 105 000e 1B78     		ldrb	r3, [r3]
 106 0010 7F2B     		cmp	r3, #127
 107 0012 10D8     		bhi	.L8
 780:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 108              		.loc 1 781 58
 109 0014 FB1D     		adds	r3, r7, #7
 110 0016 1B78     		ldrb	r3, [r3]
 111 0018 1A00     		movs	r2, r3
 112 001a 1F23     		movs	r3, #31
 113 001c 1340     		ands	r3, r2
 114              		.loc 1 781 9
 115 001e 0849     		ldr	r1, .L9
 116              		.loc 1 781 22
 117 0020 0122     		movs	r2, #1
 118 0022 9A40     		lsls	r2, r2, r3
 119 0024 1300     		movs	r3, r2
 120              		.loc 1 781 20
 121 0026 8022     		movs	r2, #128
 122 0028 8B50     		str	r3, [r1, r2]
 123              	.LBB16:
 124              	.LBB17:
 125              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 17


  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 18


  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 19


 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 20


 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 21


 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 22


 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 23


 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 24


 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 25


 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 26


 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 27


 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 28


 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 29


 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 30


 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 31


 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 32


 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 126              		.loc 2 879 3
 127              		.syntax divided
 128              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 129 002a BFF34F8F 		dsb 0xF
 130              	@ 0 "" 2
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 131              		.loc 2 880 1
 132              		.thumb
 133              		.syntax unified
 134 002e C046     		nop
 135              	.LBE17:
 136              	.LBE16:
 137              	.LBB18:
 138              	.LBB19:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 139              		.loc 2 868 3
 140              		.syntax divided
 141              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 142 0030 BFF36F8F 		isb 0xF
 143              	@ 0 "" 2
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 144              		.loc 2 869 1
 145              		.thumb
 146              		.syntax unified
 147 0034 C046     		nop
 148              	.L8:
 149              	.LBE19:
 150              	.LBE18:
 782:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 784:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 785:Drivers/CMSIS/Include/core_cm0plus.h **** }
 151              		.loc 1 785 1
 152 0036 C046     		nop
 153 0038 BD46     		mov	sp, r7
 154 003a 02B0     		add	sp, sp, #8
 155              		@ sp needed
 156 003c 80BD     		pop	{r7, pc}
 157              	.L10:
 158 003e C046     		.align	2
 159              	.L9:
 160 0040 00E100E0 		.word	-536813312
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 33


 161              		.cfi_endproc
 162              	.LFE27:
 164              		.section	.text.__NVIC_GetPendingIRQ,"ax",%progbits
 165              		.align	1
 166              		.syntax unified
 167              		.code	16
 168              		.thumb_func
 170              	__NVIC_GetPendingIRQ:
 171              	.LFB28:
 786:Drivers/CMSIS/Include/core_cm0plus.h **** 
 787:Drivers/CMSIS/Include/core_cm0plus.h **** 
 788:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 789:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 790:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 796:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 797:Drivers/CMSIS/Include/core_cm0plus.h **** {
 172              		.loc 1 797 1
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 8
 175              		@ frame_needed = 1, uses_anonymous_args = 0
 176 0000 80B5     		push	{r7, lr}
 177              	.LCFI6:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 82B0     		sub	sp, sp, #8
 182              	.LCFI7:
 183              		.cfi_def_cfa_offset 16
 184 0004 00AF     		add	r7, sp, #0
 185              	.LCFI8:
 186              		.cfi_def_cfa_register 7
 187 0006 0200     		movs	r2, r0
 188 0008 FB1D     		adds	r3, r7, #7
 189 000a 1A70     		strb	r2, [r3]
 798:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 190              		.loc 1 798 6
 191 000c FB1D     		adds	r3, r7, #7
 192 000e 1B78     		ldrb	r3, [r3]
 193 0010 7F2B     		cmp	r3, #127
 194 0012 0DD8     		bhi	.L12
 799:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 195              		.loc 1 800 29
 196 0014 094A     		ldr	r2, .L14
 197              		.loc 1 800 35
 198 0016 8023     		movs	r3, #128
 199 0018 5B00     		lsls	r3, r3, #1
 200 001a D258     		ldr	r2, [r2, r3]
 201              		.loc 1 800 68
 202 001c FB1D     		adds	r3, r7, #7
 203 001e 1B78     		ldrb	r3, [r3]
 204 0020 1900     		movs	r1, r3
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 34


 205 0022 1F23     		movs	r3, #31
 206 0024 0B40     		ands	r3, r1
 207              		.loc 1 800 80
 208 0026 DA40     		lsrs	r2, r2, r3
 209 0028 1300     		movs	r3, r2
 210              		.loc 1 800 12
 211 002a 0122     		movs	r2, #1
 212 002c 1340     		ands	r3, r2
 213 002e 00E0     		b	.L13
 214              	.L12:
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 804:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 215              		.loc 1 804 11
 216 0030 0023     		movs	r3, #0
 217              	.L13:
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 806:Drivers/CMSIS/Include/core_cm0plus.h **** }
 218              		.loc 1 806 1
 219 0032 1800     		movs	r0, r3
 220 0034 BD46     		mov	sp, r7
 221 0036 02B0     		add	sp, sp, #8
 222              		@ sp needed
 223 0038 80BD     		pop	{r7, pc}
 224              	.L15:
 225 003a C046     		.align	2
 226              	.L14:
 227 003c 00E100E0 		.word	-536813312
 228              		.cfi_endproc
 229              	.LFE28:
 231              		.section	.text.__NVIC_SetPendingIRQ,"ax",%progbits
 232              		.align	1
 233              		.syntax unified
 234              		.code	16
 235              		.thumb_func
 237              	__NVIC_SetPendingIRQ:
 238              	.LFB29:
 807:Drivers/CMSIS/Include/core_cm0plus.h **** 
 808:Drivers/CMSIS/Include/core_cm0plus.h **** 
 809:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 810:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 811:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 815:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 816:Drivers/CMSIS/Include/core_cm0plus.h **** {
 239              		.loc 1 816 1
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 8
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 80B5     		push	{r7, lr}
 244              	.LCFI9:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 7, -8
 247              		.cfi_offset 14, -4
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 35


 248 0002 82B0     		sub	sp, sp, #8
 249              	.LCFI10:
 250              		.cfi_def_cfa_offset 16
 251 0004 00AF     		add	r7, sp, #0
 252              	.LCFI11:
 253              		.cfi_def_cfa_register 7
 254 0006 0200     		movs	r2, r0
 255 0008 FB1D     		adds	r3, r7, #7
 256 000a 1A70     		strb	r2, [r3]
 817:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 257              		.loc 1 817 6
 258 000c FB1D     		adds	r3, r7, #7
 259 000e 1B78     		ldrb	r3, [r3]
 260 0010 7F2B     		cmp	r3, #127
 261 0012 0AD8     		bhi	.L18
 818:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 262              		.loc 1 819 58
 263 0014 FB1D     		adds	r3, r7, #7
 264 0016 1B78     		ldrb	r3, [r3]
 265 0018 1A00     		movs	r2, r3
 266 001a 1F23     		movs	r3, #31
 267 001c 1340     		ands	r3, r2
 268              		.loc 1 819 9
 269 001e 0549     		ldr	r1, .L19
 270              		.loc 1 819 22
 271 0020 0122     		movs	r2, #1
 272 0022 9A40     		lsls	r2, r2, r3
 273              		.loc 1 819 20
 274 0024 8023     		movs	r3, #128
 275 0026 5B00     		lsls	r3, r3, #1
 276 0028 CA50     		str	r2, [r1, r3]
 277              	.L18:
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 821:Drivers/CMSIS/Include/core_cm0plus.h **** }
 278              		.loc 1 821 1
 279 002a C046     		nop
 280 002c BD46     		mov	sp, r7
 281 002e 02B0     		add	sp, sp, #8
 282              		@ sp needed
 283 0030 80BD     		pop	{r7, pc}
 284              	.L20:
 285 0032 C046     		.align	2
 286              	.L19:
 287 0034 00E100E0 		.word	-536813312
 288              		.cfi_endproc
 289              	.LFE29:
 291              		.section	.text.__NVIC_ClearPendingIRQ,"ax",%progbits
 292              		.align	1
 293              		.syntax unified
 294              		.code	16
 295              		.thumb_func
 297              	__NVIC_ClearPendingIRQ:
 298              	.LFB30:
 822:Drivers/CMSIS/Include/core_cm0plus.h **** 
 823:Drivers/CMSIS/Include/core_cm0plus.h **** 
 824:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 36


 825:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 826:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 830:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 831:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299              		.loc 1 831 1
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 8
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              	.LCFI12:
 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 7, -8
 307              		.cfi_offset 14, -4
 308 0002 82B0     		sub	sp, sp, #8
 309              	.LCFI13:
 310              		.cfi_def_cfa_offset 16
 311 0004 00AF     		add	r7, sp, #0
 312              	.LCFI14:
 313              		.cfi_def_cfa_register 7
 314 0006 0200     		movs	r2, r0
 315 0008 FB1D     		adds	r3, r7, #7
 316 000a 1A70     		strb	r2, [r3]
 832:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 317              		.loc 1 832 6
 318 000c FB1D     		adds	r3, r7, #7
 319 000e 1B78     		ldrb	r3, [r3]
 320 0010 7F2B     		cmp	r3, #127
 321 0012 0AD8     		bhi	.L23
 833:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 322              		.loc 1 834 58
 323 0014 FB1D     		adds	r3, r7, #7
 324 0016 1B78     		ldrb	r3, [r3]
 325 0018 1A00     		movs	r2, r3
 326 001a 1F23     		movs	r3, #31
 327 001c 1340     		ands	r3, r2
 328              		.loc 1 834 9
 329 001e 0549     		ldr	r1, .L24
 330              		.loc 1 834 22
 331 0020 0122     		movs	r2, #1
 332 0022 9A40     		lsls	r2, r2, r3
 333              		.loc 1 834 20
 334 0024 C023     		movs	r3, #192
 335 0026 5B00     		lsls	r3, r3, #1
 336 0028 CA50     		str	r2, [r1, r3]
 337              	.L23:
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 836:Drivers/CMSIS/Include/core_cm0plus.h **** }
 338              		.loc 1 836 1
 339 002a C046     		nop
 340 002c BD46     		mov	sp, r7
 341 002e 02B0     		add	sp, sp, #8
 342              		@ sp needed
 343 0030 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 37


 344              	.L25:
 345 0032 C046     		.align	2
 346              	.L24:
 347 0034 00E100E0 		.word	-536813312
 348              		.cfi_endproc
 349              	.LFE30:
 351              		.section	.text.__NVIC_SetPriority,"ax",%progbits
 352              		.align	1
 353              		.syntax unified
 354              		.code	16
 355              		.thumb_func
 357              	__NVIC_SetPriority:
 358              	.LFB31:
 837:Drivers/CMSIS/Include/core_cm0plus.h **** 
 838:Drivers/CMSIS/Include/core_cm0plus.h **** 
 839:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 840:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 841:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 842:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 843:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 844:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 845:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 848:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 849:Drivers/CMSIS/Include/core_cm0plus.h **** {
 359              		.loc 1 849 1
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363 0000 90B5     		push	{r4, r7, lr}
 364              	.LCFI15:
 365              		.cfi_def_cfa_offset 12
 366              		.cfi_offset 4, -12
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 83B0     		sub	sp, sp, #12
 370              	.LCFI16:
 371              		.cfi_def_cfa_offset 24
 372 0004 00AF     		add	r7, sp, #0
 373              	.LCFI17:
 374              		.cfi_def_cfa_register 7
 375 0006 0200     		movs	r2, r0
 376 0008 3960     		str	r1, [r7]
 377 000a FB1D     		adds	r3, r7, #7
 378 000c 1A70     		strb	r2, [r3]
 850:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 379              		.loc 1 850 6
 380 000e FB1D     		adds	r3, r7, #7
 381 0010 1B78     		ldrb	r3, [r3]
 382 0012 7F2B     		cmp	r3, #127
 383 0014 28D8     		bhi	.L27
 851:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 852:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 384              		.loc 1 852 48
 385 0016 2F4A     		ldr	r2, .L30
 386              		.loc 1 852 53
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 38


 387 0018 FB1D     		adds	r3, r7, #7
 388 001a 1B78     		ldrb	r3, [r3]
 389 001c 5BB2     		sxtb	r3, r3
 390 001e 9B08     		lsrs	r3, r3, #2
 391              		.loc 1 852 52
 392 0020 C033     		adds	r3, r3, #192
 393 0022 9B00     		lsls	r3, r3, #2
 394 0024 9B58     		ldr	r3, [r3, r2]
 395              		.loc 1 852 83
 396 0026 FA1D     		adds	r2, r7, #7
 397 0028 1278     		ldrb	r2, [r2]
 398 002a 1100     		movs	r1, r2
 399 002c 0322     		movs	r2, #3
 400 002e 0A40     		ands	r2, r1
 401 0030 D200     		lsls	r2, r2, #3
 402              		.loc 1 852 80
 403 0032 FF21     		movs	r1, #255
 404 0034 9140     		lsls	r1, r1, r2
 405 0036 0A00     		movs	r2, r1
 406              		.loc 1 852 71
 407 0038 D243     		mvns	r2, r2
 408              		.loc 1 852 33
 409 003a 1A40     		ands	r2, r3
 410 003c 1100     		movs	r1, r2
 853:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 411              		.loc 1 853 20
 412 003e 3B68     		ldr	r3, [r7]
 413 0040 9B01     		lsls	r3, r3, #6
 414              		.loc 1 853 48
 415 0042 FF22     		movs	r2, #255
 416 0044 1A40     		ands	r2, r3
 417              		.loc 1 853 71
 418 0046 FB1D     		adds	r3, r7, #7
 419 0048 1B78     		ldrb	r3, [r3]
 420 004a 1800     		movs	r0, r3
 421 004c 0323     		movs	r3, #3
 422 004e 0340     		ands	r3, r0
 423 0050 DB00     		lsls	r3, r3, #3
 424              		.loc 1 853 68
 425 0052 9A40     		lsls	r2, r2, r3
 852:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 426              		.loc 1 852 9
 427 0054 1F48     		ldr	r0, .L30
 852:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 428              		.loc 1 852 14
 429 0056 FB1D     		adds	r3, r7, #7
 430 0058 1B78     		ldrb	r3, [r3]
 431 005a 5BB2     		sxtb	r3, r3
 432 005c 9B08     		lsrs	r3, r3, #2
 852:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 433              		.loc 1 852 102
 434 005e 0A43     		orrs	r2, r1
 852:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 435              		.loc 1 852 30
 436 0060 C033     		adds	r3, r3, #192
 437 0062 9B00     		lsls	r3, r3, #2
 438 0064 1A50     		str	r2, [r3, r0]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 39


 854:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 855:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 856:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 857:Drivers/CMSIS/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 858:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 859:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 860:Drivers/CMSIS/Include/core_cm0plus.h **** }
 439              		.loc 1 860 1
 440 0066 31E0     		b	.L29
 441              	.L27:
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 442              		.loc 1 857 47
 443 0068 1B4A     		ldr	r2, .L30+4
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 444              		.loc 1 857 53
 445 006a FB1D     		adds	r3, r7, #7
 446 006c 1B78     		ldrb	r3, [r3]
 447 006e 1900     		movs	r1, r3
 448 0070 0F23     		movs	r3, #15
 449 0072 0B40     		ands	r3, r1
 450 0074 083B     		subs	r3, r3, #8
 451 0076 9B08     		lsrs	r3, r3, #2
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 452              		.loc 1 857 52
 453 0078 0633     		adds	r3, r3, #6
 454 007a 9B00     		lsls	r3, r3, #2
 455 007c D318     		adds	r3, r2, r3
 456 007e 0433     		adds	r3, r3, #4
 457 0080 1B68     		ldr	r3, [r3]
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 458              		.loc 1 857 83
 459 0082 FA1D     		adds	r2, r7, #7
 460 0084 1278     		ldrb	r2, [r2]
 461 0086 1100     		movs	r1, r2
 462 0088 0322     		movs	r2, #3
 463 008a 0A40     		ands	r2, r1
 464 008c D200     		lsls	r2, r2, #3
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 465              		.loc 1 857 80
 466 008e FF21     		movs	r1, #255
 467 0090 9140     		lsls	r1, r1, r2
 468 0092 0A00     		movs	r2, r1
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 469              		.loc 1 857 71
 470 0094 D243     		mvns	r2, r2
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 471              		.loc 1 857 33
 472 0096 1A40     		ands	r2, r3
 473 0098 1100     		movs	r1, r2
 858:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 474              		.loc 1 858 20
 475 009a 3B68     		ldr	r3, [r7]
 476 009c 9B01     		lsls	r3, r3, #6
 858:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 477              		.loc 1 858 48
 478 009e FF22     		movs	r2, #255
 479 00a0 1A40     		ands	r2, r3
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 40


 858:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 480              		.loc 1 858 71
 481 00a2 FB1D     		adds	r3, r7, #7
 482 00a4 1B78     		ldrb	r3, [r3]
 483 00a6 1800     		movs	r0, r3
 484 00a8 0323     		movs	r3, #3
 485 00aa 0340     		ands	r3, r0
 486 00ac DB00     		lsls	r3, r3, #3
 858:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 487              		.loc 1 858 68
 488 00ae 9A40     		lsls	r2, r2, r3
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 489              		.loc 1 857 8
 490 00b0 0948     		ldr	r0, .L30+4
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 491              		.loc 1 857 14
 492 00b2 FB1D     		adds	r3, r7, #7
 493 00b4 1B78     		ldrb	r3, [r3]
 494 00b6 1C00     		movs	r4, r3
 495 00b8 0F23     		movs	r3, #15
 496 00ba 2340     		ands	r3, r4
 497 00bc 083B     		subs	r3, r3, #8
 498 00be 9B08     		lsrs	r3, r3, #2
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 499              		.loc 1 857 102
 500 00c0 0A43     		orrs	r2, r1
 857:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 501              		.loc 1 857 30
 502 00c2 0633     		adds	r3, r3, #6
 503 00c4 9B00     		lsls	r3, r3, #2
 504 00c6 C318     		adds	r3, r0, r3
 505 00c8 0433     		adds	r3, r3, #4
 506 00ca 1A60     		str	r2, [r3]
 507              	.L29:
 508              		.loc 1 860 1
 509 00cc C046     		nop
 510 00ce BD46     		mov	sp, r7
 511 00d0 03B0     		add	sp, sp, #12
 512              		@ sp needed
 513 00d2 90BD     		pop	{r4, r7, pc}
 514              	.L31:
 515              		.align	2
 516              	.L30:
 517 00d4 00E100E0 		.word	-536813312
 518 00d8 00ED00E0 		.word	-536810240
 519              		.cfi_endproc
 520              	.LFE31:
 522              		.section	.text.__NVIC_GetPriority,"ax",%progbits
 523              		.align	1
 524              		.syntax unified
 525              		.code	16
 526              		.thumb_func
 528              	__NVIC_GetPriority:
 529              	.LFB32:
 861:Drivers/CMSIS/Include/core_cm0plus.h **** 
 862:Drivers/CMSIS/Include/core_cm0plus.h **** 
 863:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 41


 864:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Priority
 865:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 866:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 867:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 868:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 869:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             Interrupt Priority.
 870:Drivers/CMSIS/Include/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 871:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 872:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 873:Drivers/CMSIS/Include/core_cm0plus.h **** {
 530              		.loc 1 873 1
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 8
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534 0000 80B5     		push	{r7, lr}
 535              	.LCFI18:
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 7, -8
 538              		.cfi_offset 14, -4
 539 0002 82B0     		sub	sp, sp, #8
 540              	.LCFI19:
 541              		.cfi_def_cfa_offset 16
 542 0004 00AF     		add	r7, sp, #0
 543              	.LCFI20:
 544              		.cfi_def_cfa_register 7
 545 0006 0200     		movs	r2, r0
 546 0008 FB1D     		adds	r3, r7, #7
 547 000a 1A70     		strb	r2, [r3]
 874:Drivers/CMSIS/Include/core_cm0plus.h **** 
 875:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 548              		.loc 1 875 6
 549 000c FB1D     		adds	r3, r7, #7
 550 000e 1B78     		ldrb	r3, [r3]
 551 0010 7F2B     		cmp	r3, #127
 552 0012 13D8     		bhi	.L33
 876:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 877:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 553              		.loc 1 877 29
 554 0014 174A     		ldr	r2, .L35
 555              		.loc 1 877 35
 556 0016 FB1D     		adds	r3, r7, #7
 557 0018 1B78     		ldrb	r3, [r3]
 558 001a 5BB2     		sxtb	r3, r3
 559 001c 9B08     		lsrs	r3, r3, #2
 560              		.loc 1 877 33
 561 001e C033     		adds	r3, r3, #192
 562 0020 9B00     		lsls	r3, r3, #2
 563 0022 9A58     		ldr	r2, [r3, r2]
 564              		.loc 1 877 53
 565 0024 FB1D     		adds	r3, r7, #7
 566 0026 1B78     		ldrb	r3, [r3]
 567 0028 1900     		movs	r1, r3
 568 002a 0323     		movs	r3, #3
 569 002c 0B40     		ands	r3, r1
 570 002e DB00     		lsls	r3, r3, #3
 571              		.loc 1 877 50
 572 0030 DA40     		lsrs	r2, r2, r3
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 42


 573 0032 1300     		movs	r3, r2
 574              		.loc 1 877 12
 575 0034 9B09     		lsrs	r3, r3, #6
 576 0036 0322     		movs	r2, #3
 577 0038 1340     		ands	r3, r2
 578 003a 17E0     		b	.L34
 579              	.L33:
 878:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 880:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 881:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 580              		.loc 1 881 28
 581 003c 0E4A     		ldr	r2, .L35+4
 582              		.loc 1 881 34
 583 003e FB1D     		adds	r3, r7, #7
 584 0040 1B78     		ldrb	r3, [r3]
 585 0042 1900     		movs	r1, r3
 586 0044 0F23     		movs	r3, #15
 587 0046 0B40     		ands	r3, r1
 588 0048 083B     		subs	r3, r3, #8
 589 004a 9B08     		lsrs	r3, r3, #2
 590              		.loc 1 881 33
 591 004c 0633     		adds	r3, r3, #6
 592 004e 9B00     		lsls	r3, r3, #2
 593 0050 D318     		adds	r3, r2, r3
 594 0052 0433     		adds	r3, r3, #4
 595 0054 1A68     		ldr	r2, [r3]
 596              		.loc 1 881 53
 597 0056 FB1D     		adds	r3, r7, #7
 598 0058 1B78     		ldrb	r3, [r3]
 599 005a 1900     		movs	r1, r3
 600 005c 0323     		movs	r3, #3
 601 005e 0B40     		ands	r3, r1
 602 0060 DB00     		lsls	r3, r3, #3
 603              		.loc 1 881 50
 604 0062 DA40     		lsrs	r2, r2, r3
 605 0064 1300     		movs	r3, r2
 606              		.loc 1 881 12
 607 0066 9B09     		lsrs	r3, r3, #6
 608 0068 0322     		movs	r2, #3
 609 006a 1340     		ands	r3, r2
 610              	.L34:
 882:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 883:Drivers/CMSIS/Include/core_cm0plus.h **** }
 611              		.loc 1 883 1
 612 006c 1800     		movs	r0, r3
 613 006e BD46     		mov	sp, r7
 614 0070 02B0     		add	sp, sp, #8
 615              		@ sp needed
 616 0072 80BD     		pop	{r7, pc}
 617              	.L36:
 618              		.align	2
 619              	.L35:
 620 0074 00E100E0 		.word	-536813312
 621 0078 00ED00E0 		.word	-536810240
 622              		.cfi_endproc
 623              	.LFE32:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 43


 625              		.section	.text.__NVIC_SystemReset,"ax",%progbits
 626              		.align	1
 627              		.syntax unified
 628              		.code	16
 629              		.thumb_func
 631              	__NVIC_SystemReset:
 632              	.LFB37:
 884:Drivers/CMSIS/Include/core_cm0plus.h **** 
 885:Drivers/CMSIS/Include/core_cm0plus.h **** 
 886:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 887:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Encode Priority
 888:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 889:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 890:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 891:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 892:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 893:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 894:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 895:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 896:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 897:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 898:Drivers/CMSIS/Include/core_cm0plus.h **** {
 899:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 900:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 901:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 902:Drivers/CMSIS/Include/core_cm0plus.h **** 
 903:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 904:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 905:Drivers/CMSIS/Include/core_cm0plus.h **** 
 906:Drivers/CMSIS/Include/core_cm0plus.h ****   return (
 907:Drivers/CMSIS/Include/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 908:Drivers/CMSIS/Include/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 909:Drivers/CMSIS/Include/core_cm0plus.h ****          );
 910:Drivers/CMSIS/Include/core_cm0plus.h **** }
 911:Drivers/CMSIS/Include/core_cm0plus.h **** 
 912:Drivers/CMSIS/Include/core_cm0plus.h **** 
 913:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 914:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Decode Priority
 915:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
 916:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value and subpriority value.
 917:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 918:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 919:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 920:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 921:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 922:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 923:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 924:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 925:Drivers/CMSIS/Include/core_cm0plus.h **** {
 926:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 927:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 928:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 929:Drivers/CMSIS/Include/core_cm0plus.h **** 
 930:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 931:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 932:Drivers/CMSIS/Include/core_cm0plus.h **** 
 933:Drivers/CMSIS/Include/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 44


 934:Drivers/CMSIS/Include/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 935:Drivers/CMSIS/Include/core_cm0plus.h **** }
 936:Drivers/CMSIS/Include/core_cm0plus.h **** 
 937:Drivers/CMSIS/Include/core_cm0plus.h **** 
 938:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 939:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Vector
 940:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 941:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 942:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 943:Drivers/CMSIS/Include/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 944:Drivers/CMSIS/Include/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
 945:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 946:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 947:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 948:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 949:Drivers/CMSIS/Include/core_cm0plus.h **** {
 950:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 951:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 952:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 953:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t *vectors = (uint32_t *)0x0U;
 954:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 955:Drivers/CMSIS/Include/core_cm0plus.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 956:Drivers/CMSIS/Include/core_cm0plus.h **** }
 957:Drivers/CMSIS/Include/core_cm0plus.h **** 
 958:Drivers/CMSIS/Include/core_cm0plus.h **** 
 959:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 960:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Vector
 961:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 962:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 963:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 964:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 965:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                 Address of interrupt handler function
 966:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 967:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 968:Drivers/CMSIS/Include/core_cm0plus.h **** {
 969:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 970:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 971:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 972:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 973:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 974:Drivers/CMSIS/Include/core_cm0plus.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 975:Drivers/CMSIS/Include/core_cm0plus.h **** 
 976:Drivers/CMSIS/Include/core_cm0plus.h **** }
 977:Drivers/CMSIS/Include/core_cm0plus.h **** 
 978:Drivers/CMSIS/Include/core_cm0plus.h **** 
 979:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 980:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Reset
 981:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 982:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 983:Drivers/CMSIS/Include/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 984:Drivers/CMSIS/Include/core_cm0plus.h **** {
 633              		.loc 1 984 1
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637 0000 80B5     		push	{r7, lr}
 638              	.LCFI21:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 45


 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 7, -8
 641              		.cfi_offset 14, -4
 642 0002 00AF     		add	r7, sp, #0
 643              	.LCFI22:
 644              		.cfi_def_cfa_register 7
 645              	.LBB20:
 646              	.LBB21:
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647              		.loc 2 879 3
 648              		.syntax divided
 649              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 650 0004 BFF34F8F 		dsb 0xF
 651              	@ 0 "" 2
 652              		.loc 2 880 1
 653              		.thumb
 654              		.syntax unified
 655 0008 C046     		nop
 656              	.LBE21:
 657              	.LBE20:
 985:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
 986:Drivers/CMSIS/Include/core_cm0plus.h ****                                                                        buffered write are completed
 987:Drivers/CMSIS/Include/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 658              		.loc 1 987 6
 659 000a 044B     		ldr	r3, .L39
 660              		.loc 1 987 15
 661 000c 044A     		ldr	r2, .L39+4
 662 000e DA60     		str	r2, [r3, #12]
 663              	.LBB22:
 664              	.LBB23:
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 665              		.loc 2 879 3
 666              		.syntax divided
 667              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 668 0010 BFF34F8F 		dsb 0xF
 669              	@ 0 "" 2
 670              		.loc 2 880 1
 671              		.thumb
 672              		.syntax unified
 673 0014 C046     		nop
 674              	.L38:
 675              	.LBE23:
 676              	.LBE22:
 988:Drivers/CMSIS/Include/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 989:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
 990:Drivers/CMSIS/Include/core_cm0plus.h **** 
 991:Drivers/CMSIS/Include/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
 992:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 993:Drivers/CMSIS/Include/core_cm0plus.h ****     __NOP();
 677              		.loc 1 993 5 discriminator 1
 678              		.syntax divided
 679              	@ 993 "Drivers/CMSIS/Include/core_cm0plus.h" 1
 680 0016 C046     		nop
 681              	@ 0 "" 2
 682              		.thumb
 683              		.syntax unified
 684 0018 FDE7     		b	.L38
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 46


 685              	.L40:
 686 001a C046     		.align	2
 687              	.L39:
 688 001c 00ED00E0 		.word	-536810240
 689 0020 0400FA05 		.word	100270084
 690              		.cfi_endproc
 691              	.LFE37:
 693              		.section	.text.SysTick_Config,"ax",%progbits
 694              		.align	1
 695              		.syntax unified
 696              		.code	16
 697              		.thumb_func
 699              	SysTick_Config:
 700              	.LFB46:
 994:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 995:Drivers/CMSIS/Include/core_cm0plus.h **** }
 996:Drivers/CMSIS/Include/core_cm0plus.h **** 
 997:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_NVICFunctions */
 998:Drivers/CMSIS/Include/core_cm0plus.h **** 
 999:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################  MPU functions  #################################### */
1000:Drivers/CMSIS/Include/core_cm0plus.h **** 
1001:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1002:Drivers/CMSIS/Include/core_cm0plus.h **** 
1003:Drivers/CMSIS/Include/core_cm0plus.h **** #include "mpu_armv7.h"
1004:Drivers/CMSIS/Include/core_cm0plus.h **** 
1005:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
1006:Drivers/CMSIS/Include/core_cm0plus.h **** 
1007:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################  FPU functions  #################################### */
1008:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1009:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1010:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1011:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Function that provides FPU type.
1012:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
1013:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1014:Drivers/CMSIS/Include/core_cm0plus.h **** 
1015:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1016:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   get FPU type
1017:Drivers/CMSIS/Include/core_cm0plus.h ****   \details returns the FPU type
1018:Drivers/CMSIS/Include/core_cm0plus.h ****   \returns
1019:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  0: No FPU
1020:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  1: Single precision FPU
1021:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  2: Double + Single precision FPU
1022:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1023:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1024:Drivers/CMSIS/Include/core_cm0plus.h **** {
1025:Drivers/CMSIS/Include/core_cm0plus.h ****     return 0U;           /* No FPU */
1026:Drivers/CMSIS/Include/core_cm0plus.h **** }
1027:Drivers/CMSIS/Include/core_cm0plus.h **** 
1028:Drivers/CMSIS/Include/core_cm0plus.h **** 
1029:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_FpuFunctions */
1030:Drivers/CMSIS/Include/core_cm0plus.h **** 
1031:Drivers/CMSIS/Include/core_cm0plus.h **** 
1032:Drivers/CMSIS/Include/core_cm0plus.h **** 
1033:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##################################    SysTick function  ########################################
1034:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1035:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1036:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 47


1037:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that configure the System.
1038:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
1039:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1040:Drivers/CMSIS/Include/core_cm0plus.h **** 
1041:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1042:Drivers/CMSIS/Include/core_cm0plus.h **** 
1043:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1044:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Tick Configuration
1045:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1046:Drivers/CMSIS/Include/core_cm0plus.h ****            Counter is in free running mode to generate periodic interrupts.
1047:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1048:Drivers/CMSIS/Include/core_cm0plus.h ****   \return          0  Function succeeded.
1049:Drivers/CMSIS/Include/core_cm0plus.h ****   \return          1  Function failed.
1050:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1051:Drivers/CMSIS/Include/core_cm0plus.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1052:Drivers/CMSIS/Include/core_cm0plus.h ****            must contain a vendor-specific implementation of this function.
1053:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1054:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1055:Drivers/CMSIS/Include/core_cm0plus.h **** {
 701              		.loc 1 1055 1
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 8
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 0000 80B5     		push	{r7, lr}
 706              	.LCFI23:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 7, -8
 709              		.cfi_offset 14, -4
 710 0002 82B0     		sub	sp, sp, #8
 711              	.LCFI24:
 712              		.cfi_def_cfa_offset 16
 713 0004 00AF     		add	r7, sp, #0
 714              	.LCFI25:
 715              		.cfi_def_cfa_register 7
 716 0006 7860     		str	r0, [r7, #4]
1056:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 717              		.loc 1 1056 14
 718 0008 7B68     		ldr	r3, [r7, #4]
 719 000a 5A1E     		subs	r2, r3, #1
 720              		.loc 1 1056 6
 721 000c 8023     		movs	r3, #128
 722 000e 5B04     		lsls	r3, r3, #17
 723 0010 9A42     		cmp	r2, r3
 724 0012 01D3     		bcc	.L42
1057:Drivers/CMSIS/Include/core_cm0plus.h ****   {
1058:Drivers/CMSIS/Include/core_cm0plus.h ****     return (1UL);                                                   /* Reload value impossible */
 725              		.loc 1 1058 12
 726 0014 0123     		movs	r3, #1
 727 0016 10E0     		b	.L43
 728              	.L42:
1059:Drivers/CMSIS/Include/core_cm0plus.h ****   }
1060:Drivers/CMSIS/Include/core_cm0plus.h **** 
1061:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 729              		.loc 1 1061 10
 730 0018 0A4B     		ldr	r3, .L44
 731              		.loc 1 1061 20
 732 001a 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 48


 733 001c 013A     		subs	r2, r2, #1
 734              		.loc 1 1061 18
 735 001e 5A60     		str	r2, [r3, #4]
1062:Drivers/CMSIS/Include/core_cm0plus.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 736              		.loc 1 1062 3
 737 0020 0123     		movs	r3, #1
 738 0022 5B42     		rsbs	r3, r3, #0
 739 0024 0321     		movs	r1, #3
 740 0026 1800     		movs	r0, r3
 741 0028 FFF7FEFF 		bl	__NVIC_SetPriority
1063:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 742              		.loc 1 1063 10
 743 002c 054B     		ldr	r3, .L44
 744              		.loc 1 1063 18
 745 002e 0022     		movs	r2, #0
 746 0030 9A60     		str	r2, [r3, #8]
1064:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 747              		.loc 1 1064 10
 748 0032 044B     		ldr	r3, .L44
 749              		.loc 1 1064 18
 750 0034 0722     		movs	r2, #7
 751 0036 1A60     		str	r2, [r3]
1065:Drivers/CMSIS/Include/core_cm0plus.h ****                    SysTick_CTRL_TICKINT_Msk   |
1066:Drivers/CMSIS/Include/core_cm0plus.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
1067:Drivers/CMSIS/Include/core_cm0plus.h ****   return (0UL);                                                     /* Function successful */
 752              		.loc 1 1067 10
 753 0038 0023     		movs	r3, #0
 754              	.L43:
1068:Drivers/CMSIS/Include/core_cm0plus.h **** }
 755              		.loc 1 1068 1
 756 003a 1800     		movs	r0, r3
 757 003c BD46     		mov	sp, r7
 758 003e 02B0     		add	sp, sp, #8
 759              		@ sp needed
 760 0040 80BD     		pop	{r7, pc}
 761              	.L45:
 762 0042 C046     		.align	2
 763              	.L44:
 764 0044 10E000E0 		.word	-536813552
 765              		.cfi_endproc
 766              	.LFE46:
 768              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
 769              		.align	1
 770              		.global	HAL_NVIC_SetPriority
 771              		.syntax unified
 772              		.code	16
 773              		.thumb_func
 775              	HAL_NVIC_SetPriority:
 776              	.LFB47:
 777              		.file 3 "Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c"
   1:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @file    stm32l0xx_hal_cortex.c
   4:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          functionalities of the CORTEX:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 49


   8:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *           + Initialization and Configuration functions
   9:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *           + Peripheral Control functions 
  10:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *
  11:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   @verbatim  
  12:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
  13:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
  15:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]  
  16:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  17:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     ===========================================================
  18:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]     
  19:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  20:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     The Cortex M0+ exceptions are managed by CMSIS functions.
  21:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       (#) Enable and Configure the priority of the selected IRQ Channels. 
  22:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****              The priority can be 0..3. 
  23:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  24:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         -@- Lower priority values gives higher priority.
  25:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         -@- Priority Order:
  26:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****             (#@) Lowest priority.
  27:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****             (#@) Lowest hardware priority (IRQn position).  
  28:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     
  29:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****      (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority() 
  30:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  31:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****      (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ() 
  32:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       
  33:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]  
  34:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  35:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     ========================================================
  36:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]
  37:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     Setup SysTick Timer for time base.
  38:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****            
  39:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  40:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        is a CMSIS function that:
  41:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  42:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x03).
  43:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  44:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  45:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  46:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  47:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 	
  48:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the function
  49:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  50:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The HAL_SYSTICK_CLKSourceConfig() function is defined
  51:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        inside the stm32l0xx_hal_cortex.c file.
  52:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  53:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  54:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  55:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  56:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  57:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  58:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                             
  59:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  60:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  61:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  62:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    
  63:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   @endverbatim
  64:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ******************************************************************************
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 50


  65:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @attention
  66:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *
  67:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
  68:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * All rights reserved.</center></h2>
  69:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *
  70:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  71:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * the "License"; You may not use this file except in compliance with the
  72:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * License. You may obtain a copy of the License at:
  73:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  74:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *
  75:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ******************************************************************************  
  76:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
  77:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  78:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  79:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** #include "stm32l0xx_hal.h"
  80:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  81:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup STM32L0xx_HAL_Driver
  82:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
  83:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
  84:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  85:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
  86:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  87:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX
  88:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief CORTEX HAL module driver
  89:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
  90:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
  91:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  92:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private types -------------------------------------------------------------*/
  93:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
  94:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private constants ---------------------------------------------------------*/
  95:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private macros ------------------------------------------------------------*/
  96:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private functions ---------------------------------------------------------*/
  97:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Exported functions --------------------------------------------------------*/
  98:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  99:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions
 100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
 101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions 
 105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions 
 106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  *
 107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** @verbatim    
 108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****               ##### Initialization and Configuration functions #####
 110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]
 112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       Systick functionalities 
 114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** @endverbatim
 116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
 117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 51


 122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of  IRQn_Type enumeration
 123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)
 124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  PreemptPriority The pre-emption priority for the IRQn channel.
 125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 3.
 126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority 
 127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  SubPriority the subpriority level for the IRQ channel.
 128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
 129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         no subpriority supported in Cortex M0+ based products.   
 130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** { 
 778              		.loc 3 133 1
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 16
 781              		@ frame_needed = 1, uses_anonymous_args = 0
 782 0000 80B5     		push	{r7, lr}
 783              	.LCFI26:
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 84B0     		sub	sp, sp, #16
 788              	.LCFI27:
 789              		.cfi_def_cfa_offset 24
 790 0004 00AF     		add	r7, sp, #0
 791              	.LCFI28:
 792              		.cfi_def_cfa_register 7
 793 0006 B960     		str	r1, [r7, #8]
 794 0008 7A60     		str	r2, [r7, #4]
 795 000a 0F21     		movs	r1, #15
 796 000c 7B18     		adds	r3, r7, r1
 797 000e 021C     		adds	r2, r0, #0
 798 0010 1A70     		strb	r2, [r3]
 134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
 135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_SetPriority(IRQn,PreemptPriority);
 799              		.loc 3 136 3
 800 0012 BA68     		ldr	r2, [r7, #8]
 801 0014 7B18     		adds	r3, r7, r1
 802 0016 1B78     		ldrb	r3, [r3]
 803 0018 5BB2     		sxtb	r3, r3
 804 001a 1100     		movs	r1, r2
 805 001c 1800     		movs	r0, r3
 806 001e FFF7FEFF 		bl	__NVIC_SetPriority
 137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 807              		.loc 3 137 1
 808 0022 C046     		nop
 809 0024 BD46     		mov	sp, r7
 810 0026 04B0     		add	sp, sp, #16
 811              		@ sp needed
 812 0028 80BD     		pop	{r7, pc}
 813              		.cfi_endproc
 814              	.LFE47:
 816              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 817              		.align	1
 818              		.global	HAL_NVIC_EnableIRQ
 819              		.syntax unified
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 52


 820              		.code	16
 821              		.thumb_func
 823              	HAL_NVIC_EnableIRQ:
 824              	.LFB48:
 138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Enable a device specific interrupt in the NVIC interrupt controller.
 141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         function should be called before. 
 143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of  IRQn_Type enumeration
 145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 825              		.loc 3 149 1
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 8
 828              		@ frame_needed = 1, uses_anonymous_args = 0
 829 0000 80B5     		push	{r7, lr}
 830              	.LCFI29:
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 0002 82B0     		sub	sp, sp, #8
 835              	.LCFI30:
 836              		.cfi_def_cfa_offset 16
 837 0004 00AF     		add	r7, sp, #0
 838              	.LCFI31:
 839              		.cfi_def_cfa_register 7
 840 0006 0200     		movs	r2, r0
 841 0008 FB1D     		adds	r3, r7, #7
 842 000a 1A70     		strb	r2, [r3]
 150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   
 153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Enable interrupt */
 154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 843              		.loc 3 154 3
 844 000c FB1D     		adds	r3, r7, #7
 845 000e 1B78     		ldrb	r3, [r3]
 846 0010 5BB2     		sxtb	r3, r3
 847 0012 1800     		movs	r0, r3
 848 0014 FFF7FEFF 		bl	__NVIC_EnableIRQ
 155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 849              		.loc 3 155 1
 850 0018 C046     		nop
 851 001a BD46     		mov	sp, r7
 852 001c 02B0     		add	sp, sp, #8
 853              		@ sp needed
 854 001e 80BD     		pop	{r7, pc}
 855              		.cfi_endproc
 856              	.LFE48:
 858              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 859              		.align	1
 860              		.global	HAL_NVIC_DisableIRQ
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 53


 861              		.syntax unified
 862              		.code	16
 863              		.thumb_func
 865              	HAL_NVIC_DisableIRQ:
 866              	.LFB49:
 156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Disable a device specific interrupt in the NVIC interrupt controller.
 159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 867              		.loc 3 165 1
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 8
 870              		@ frame_needed = 1, uses_anonymous_args = 0
 871 0000 80B5     		push	{r7, lr}
 872              	.LCFI32:
 873              		.cfi_def_cfa_offset 8
 874              		.cfi_offset 7, -8
 875              		.cfi_offset 14, -4
 876 0002 82B0     		sub	sp, sp, #8
 877              	.LCFI33:
 878              		.cfi_def_cfa_offset 16
 879 0004 00AF     		add	r7, sp, #0
 880              	.LCFI34:
 881              		.cfi_def_cfa_register 7
 882 0006 0200     		movs	r2, r0
 883 0008 FB1D     		adds	r3, r7, #7
 884 000a 1A70     		strb	r2, [r3]
 166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
 167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   
 169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Disable interrupt */
 170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 885              		.loc 3 170 3
 886 000c FB1D     		adds	r3, r7, #7
 887 000e 1B78     		ldrb	r3, [r3]
 888 0010 5BB2     		sxtb	r3, r3
 889 0012 1800     		movs	r0, r3
 890 0014 FFF7FEFF 		bl	__NVIC_DisableIRQ
 171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 891              		.loc 3 171 1
 892 0018 C046     		nop
 893 001a BD46     		mov	sp, r7
 894 001c 02B0     		add	sp, sp, #8
 895              		@ sp needed
 896 001e 80BD     		pop	{r7, pc}
 897              		.cfi_endproc
 898              	.LFE49:
 900              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 901              		.align	1
 902              		.global	HAL_NVIC_SystemReset
 903              		.syntax unified
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 54


 904              		.code	16
 905              		.thumb_func
 907              	HAL_NVIC_SystemReset:
 908              	.LFB50:
 172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Initiate a system reset request to reset the MCU.
 175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 909              		.loc 3 178 1
 910              		.cfi_startproc
 911              		@ args = 0, pretend = 0, frame = 0
 912              		@ frame_needed = 1, uses_anonymous_args = 0
 913 0000 80B5     		push	{r7, lr}
 914              	.LCFI35:
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 7, -8
 917              		.cfi_offset 14, -4
 918 0002 00AF     		add	r7, sp, #0
 919              	.LCFI36:
 920              		.cfi_def_cfa_register 7
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* System Reset */
 180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_SystemReset();
 921              		.loc 3 180 3
 922 0004 FFF7FEFF 		bl	__NVIC_SystemReset
 923              		.cfi_endproc
 924              	.LFE50:
 926              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 927              		.align	1
 928              		.global	HAL_SYSTICK_Config
 929              		.syntax unified
 930              		.code	16
 931              		.thumb_func
 933              	HAL_SYSTICK_Config:
 934              	.LFB51:
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Initialize the System Timer with interrupt enabled and start the System Tick Timer (Sys
 185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *                  - 1  Function failed.
 189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 935              		.loc 3 191 1
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 8
 938              		@ frame_needed = 1, uses_anonymous_args = 0
 939 0000 80B5     		push	{r7, lr}
 940              	.LCFI37:
 941              		.cfi_def_cfa_offset 8
 942              		.cfi_offset 7, -8
 943              		.cfi_offset 14, -4
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 55


 944 0002 82B0     		sub	sp, sp, #8
 945              	.LCFI38:
 946              		.cfi_def_cfa_offset 16
 947 0004 00AF     		add	r7, sp, #0
 948              	.LCFI39:
 949              		.cfi_def_cfa_register 7
 950 0006 7860     		str	r0, [r7, #4]
 192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 951              		.loc 3 192 11
 952 0008 7B68     		ldr	r3, [r7, #4]
 953 000a 1800     		movs	r0, r3
 954 000c FFF7FEFF 		bl	SysTick_Config
 955 0010 0300     		movs	r3, r0
 193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 956              		.loc 3 193 1
 957 0012 1800     		movs	r0, r3
 958 0014 BD46     		mov	sp, r7
 959 0016 02B0     		add	sp, sp, #8
 960              		@ sp needed
 961 0018 80BD     		pop	{r7, pc}
 962              		.cfi_endproc
 963              	.LFE51:
 965              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 966              		.align	1
 967              		.global	HAL_NVIC_GetPriority
 968              		.syntax unified
 969              		.code	16
 970              		.thumb_func
 972              	HAL_NVIC_GetPriority:
 973              	.LFB52:
 194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @}
 196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group2 Peripheral Control functions 
 199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  *  @brief   Cortex control functions 
 200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  *
 201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** @verbatim   
 202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================  
 205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]
 206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       (NVIC, SYSTICK) functionalities. 
 208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  
 209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       
 210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** @endverbatim
 211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
 212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 56


 221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
 223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 974              		.loc 3 223 1
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 8
 977              		@ frame_needed = 1, uses_anonymous_args = 0
 978 0000 80B5     		push	{r7, lr}
 979              	.LCFI40:
 980              		.cfi_def_cfa_offset 8
 981              		.cfi_offset 7, -8
 982              		.cfi_offset 14, -4
 983 0002 82B0     		sub	sp, sp, #8
 984              	.LCFI41:
 985              		.cfi_def_cfa_offset 16
 986 0004 00AF     		add	r7, sp, #0
 987              	.LCFI42:
 988              		.cfi_def_cfa_register 7
 989 0006 0200     		movs	r2, r0
 990 0008 FB1D     		adds	r3, r7, #7
 991 000a 1A70     		strb	r2, [r3]
 224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Get priority for Cortex-M system or device specific interrupts */
 225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   return NVIC_GetPriority(IRQn);
 992              		.loc 3 225 10
 993 000c FB1D     		adds	r3, r7, #7
 994 000e 1B78     		ldrb	r3, [r3]
 995 0010 5BB2     		sxtb	r3, r3
 996 0012 1800     		movs	r0, r3
 997 0014 FFF7FEFF 		bl	__NVIC_GetPriority
 998 0018 0300     		movs	r3, r0
 226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 999              		.loc 3 226 1
 1000 001a 1800     		movs	r0, r3
 1001 001c BD46     		mov	sp, r7
 1002 001e 02B0     		add	sp, sp, #8
 1003              		@ sp needed
 1004 0020 80BD     		pop	{r7, pc}
 1005              		.cfi_endproc
 1006              	.LFE52:
 1008              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 1009              		.align	1
 1010              		.global	HAL_NVIC_SetPendingIRQ
 1011              		.syntax unified
 1012              		.code	16
 1013              		.thumb_func
 1015              	HAL_NVIC_SetPendingIRQ:
 1016              	.LFB53:
 227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** { 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 57


 1017              		.loc 3 236 1
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 8
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021 0000 80B5     		push	{r7, lr}
 1022              	.LCFI43:
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 7, -8
 1025              		.cfi_offset 14, -4
 1026 0002 82B0     		sub	sp, sp, #8
 1027              	.LCFI44:
 1028              		.cfi_def_cfa_offset 16
 1029 0004 00AF     		add	r7, sp, #0
 1030              	.LCFI45:
 1031              		.cfi_def_cfa_register 7
 1032 0006 0200     		movs	r2, r0
 1033 0008 FB1D     		adds	r3, r7, #7
 1034 000a 1A70     		strb	r2, [r3]
 237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Set interrupt pending */
 238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 1035              		.loc 3 238 3
 1036 000c FB1D     		adds	r3, r7, #7
 1037 000e 1B78     		ldrb	r3, [r3]
 1038 0010 5BB2     		sxtb	r3, r3
 1039 0012 1800     		movs	r0, r3
 1040 0014 FFF7FEFF 		bl	__NVIC_SetPendingIRQ
 239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1041              		.loc 3 239 1
 1042 0018 C046     		nop
 1043 001a BD46     		mov	sp, r7
 1044 001c 02B0     		add	sp, sp, #8
 1045              		@ sp needed
 1046 001e 80BD     		pop	{r7, pc}
 1047              		.cfi_endproc
 1048              	.LFE53:
 1050              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 1051              		.align	1
 1052              		.global	HAL_NVIC_GetPendingIRQ
 1053              		.syntax unified
 1054              		.code	16
 1055              		.thumb_func
 1057              	HAL_NVIC_GetPendingIRQ:
 1058              	.LFB54:
 240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Get Pending Interrupt (read the pending register in the NVIC 
 243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         and return the pending bit for the specified interrupt).
 244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          This parameter can be an enumerator of  IRQn_Type enumeration
 246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** { 
 1059              		.loc 3 251 1
 1060              		.cfi_startproc
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 58


 1061              		@ args = 0, pretend = 0, frame = 8
 1062              		@ frame_needed = 1, uses_anonymous_args = 0
 1063 0000 80B5     		push	{r7, lr}
 1064              	.LCFI46:
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 7, -8
 1067              		.cfi_offset 14, -4
 1068 0002 82B0     		sub	sp, sp, #8
 1069              	.LCFI47:
 1070              		.cfi_def_cfa_offset 16
 1071 0004 00AF     		add	r7, sp, #0
 1072              	.LCFI48:
 1073              		.cfi_def_cfa_register 7
 1074 0006 0200     		movs	r2, r0
 1075 0008 FB1D     		adds	r3, r7, #7
 1076 000a 1A70     		strb	r2, [r3]
 252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 1077              		.loc 3 253 10
 1078 000c FB1D     		adds	r3, r7, #7
 1079 000e 1B78     		ldrb	r3, [r3]
 1080 0010 5BB2     		sxtb	r3, r3
 1081 0012 1800     		movs	r0, r3
 1082 0014 FFF7FEFF 		bl	__NVIC_GetPendingIRQ
 1083 0018 0300     		movs	r3, r0
 254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1084              		.loc 3 254 1
 1085 001a 1800     		movs	r0, r3
 1086 001c BD46     		mov	sp, r7
 1087 001e 02B0     		add	sp, sp, #8
 1088              		@ sp needed
 1089 0020 80BD     		pop	{r7, pc}
 1090              		.cfi_endproc
 1091              	.LFE54:
 1093              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 1094              		.align	1
 1095              		.global	HAL_NVIC_ClearPendingIRQ
 1096              		.syntax unified
 1097              		.code	16
 1098              		.thumb_func
 1100              	HAL_NVIC_ClearPendingIRQ:
 1101              	.LFB55:
 255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Clear the pending bit of an external interrupt.
 258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** { 
 1102              		.loc 3 264 1
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 8
 1105              		@ frame_needed = 1, uses_anonymous_args = 0
 1106 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 59


 1107              	.LCFI49:
 1108              		.cfi_def_cfa_offset 8
 1109              		.cfi_offset 7, -8
 1110              		.cfi_offset 14, -4
 1111 0002 82B0     		sub	sp, sp, #8
 1112              	.LCFI50:
 1113              		.cfi_def_cfa_offset 16
 1114 0004 00AF     		add	r7, sp, #0
 1115              	.LCFI51:
 1116              		.cfi_def_cfa_register 7
 1117 0006 0200     		movs	r2, r0
 1118 0008 FB1D     		adds	r3, r7, #7
 1119 000a 1A70     		strb	r2, [r3]
 265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Clear pending interrupt */
 266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 1120              		.loc 3 266 3
 1121 000c FB1D     		adds	r3, r7, #7
 1122 000e 1B78     		ldrb	r3, [r3]
 1123 0010 5BB2     		sxtb	r3, r3
 1124 0012 1800     		movs	r0, r3
 1125 0014 FFF7FEFF 		bl	__NVIC_ClearPendingIRQ
 267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1126              		.loc 3 267 1
 1127 0018 C046     		nop
 1128 001a BD46     		mov	sp, r7
 1129 001c 02B0     		add	sp, sp, #8
 1130              		@ sp needed
 1131 001e 80BD     		pop	{r7, pc}
 1132              		.cfi_endproc
 1133              	.LFE55:
 1135              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 1136              		.align	1
 1137              		.global	HAL_SYSTICK_CLKSourceConfig
 1138              		.syntax unified
 1139              		.code	16
 1140              		.thumb_func
 1142              	HAL_SYSTICK_CLKSourceConfig:
 1143              	.LFB56:
 268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Configure the SysTick clock source.
 272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  CLKSource specifies the SysTick clock source.
 273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 1144              		.loc 3 279 1
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 8
 1147              		@ frame_needed = 1, uses_anonymous_args = 0
 1148 0000 80B5     		push	{r7, lr}
 1149              	.LCFI52:
 1150              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 60


 1151              		.cfi_offset 7, -8
 1152              		.cfi_offset 14, -4
 1153 0002 82B0     		sub	sp, sp, #8
 1154              	.LCFI53:
 1155              		.cfi_def_cfa_offset 16
 1156 0004 00AF     		add	r7, sp, #0
 1157              	.LCFI54:
 1158              		.cfi_def_cfa_register 7
 1159 0006 7860     		str	r0, [r7, #4]
 280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 1160              		.loc 3 282 6
 1161 0008 7B68     		ldr	r3, [r7, #4]
 1162 000a 042B     		cmp	r3, #4
 1163 000c 06D1     		bne	.L59
 283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   {
 284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 1164              		.loc 3 284 19
 1165 000e 084B     		ldr	r3, .L62
 1166 0010 1A68     		ldr	r2, [r3]
 1167 0012 074B     		ldr	r3, .L62
 1168 0014 0421     		movs	r1, #4
 1169 0016 0A43     		orrs	r2, r1
 1170 0018 1A60     		str	r2, [r3]
 285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   else
 287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   {
 288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1171              		.loc 3 290 1
 1172 001a 05E0     		b	.L61
 1173              	.L59:
 288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 1174              		.loc 3 288 19
 1175 001c 044B     		ldr	r3, .L62
 1176 001e 1A68     		ldr	r2, [r3]
 1177 0020 034B     		ldr	r3, .L62
 1178 0022 0421     		movs	r1, #4
 1179 0024 8A43     		bics	r2, r1
 1180 0026 1A60     		str	r2, [r3]
 1181              	.L61:
 1182              		.loc 3 290 1
 1183 0028 C046     		nop
 1184 002a BD46     		mov	sp, r7
 1185 002c 02B0     		add	sp, sp, #8
 1186              		@ sp needed
 1187 002e 80BD     		pop	{r7, pc}
 1188              	.L63:
 1189              		.align	2
 1190              	.L62:
 1191 0030 10E000E0 		.word	-536813552
 1192              		.cfi_endproc
 1193              	.LFE56:
 1195              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 1196              		.align	1
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 61


 1197              		.global	HAL_SYSTICK_IRQHandler
 1198              		.syntax unified
 1199              		.code	16
 1200              		.thumb_func
 1202              	HAL_SYSTICK_IRQHandler:
 1203              	.LFB57:
 291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Handle SYSTICK interrupt request.
 294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 1204              		.loc 3 297 1
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 1, uses_anonymous_args = 0
 1208 0000 80B5     		push	{r7, lr}
 1209              	.LCFI55:
 1210              		.cfi_def_cfa_offset 8
 1211              		.cfi_offset 7, -8
 1212              		.cfi_offset 14, -4
 1213 0002 00AF     		add	r7, sp, #0
 1214              	.LCFI56:
 1215              		.cfi_def_cfa_register 7
 298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 1216              		.loc 3 298 3
 1217 0004 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1218              		.loc 3 299 1
 1219 0008 C046     		nop
 1220 000a BD46     		mov	sp, r7
 1221              		@ sp needed
 1222 000c 80BD     		pop	{r7, pc}
 1223              		.cfi_endproc
 1224              	.LFE57:
 1226              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 1227              		.align	1
 1228              		.weak	HAL_SYSTICK_Callback
 1229              		.syntax unified
 1230              		.code	16
 1231              		.thumb_func
 1233              	HAL_SYSTICK_Callback:
 1234              	.LFB58:
 300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 1235              		.loc 3 306 1
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 0
 1238              		@ frame_needed = 1, uses_anonymous_args = 0
 1239 0000 80B5     		push	{r7, lr}
 1240              	.LCFI57:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 62


 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 7, -8
 1243              		.cfi_offset 14, -4
 1244 0002 00AF     		add	r7, sp, #0
 1245              	.LCFI58:
 1246              		.cfi_def_cfa_register 7
 307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    */
 310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1247              		.loc 3 310 1
 1248 0004 C046     		nop
 1249 0006 BD46     		mov	sp, r7
 1250              		@ sp needed
 1251 0008 80BD     		pop	{r7, pc}
 1252              		.cfi_endproc
 1253              	.LFE58:
 1255              		.section	.text.HAL_MPU_Disable,"ax",%progbits
 1256              		.align	1
 1257              		.global	HAL_MPU_Disable
 1258              		.syntax unified
 1259              		.code	16
 1260              		.thumb_func
 1262              	HAL_MPU_Disable:
 1263              	.LFB59:
 311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** #if (__MPU_PRESENT == 1U)
 313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Disable the MPU.
 315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_MPU_Disable(void)
 318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 1264              		.loc 3 318 1
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 0
 1267              		@ frame_needed = 1, uses_anonymous_args = 0
 1268 0000 80B5     		push	{r7, lr}
 1269              	.LCFI59:
 1270              		.cfi_def_cfa_offset 8
 1271              		.cfi_offset 7, -8
 1272              		.cfi_offset 14, -4
 1273 0002 00AF     		add	r7, sp, #0
 1274              	.LCFI60:
 1275              		.cfi_def_cfa_register 7
 1276              	.LBB24:
 1277              	.LBB25:
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 63


 1278              		.loc 2 890 3
 1279              		.syntax divided
 1280              	@ 890 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1281 0004 BFF35F8F 		dmb 0xF
 1282              	@ 0 "" 2
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1283              		.loc 2 891 1
 1284              		.thumb
 1285              		.syntax unified
 1286 0008 C046     		nop
 1287              	.LBE25:
 1288              	.LBE24:
 319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /*Data Memory Barrier setup */
 321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   __DMB();
 322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Disable the MPU */
 323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   MPU->CTRL = 0;
 1289              		.loc 3 323 6
 1290 000a 034B     		ldr	r3, .L67
 1291              		.loc 3 323 13
 1292 000c 0022     		movs	r2, #0
 1293 000e 5A60     		str	r2, [r3, #4]
 324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1294              		.loc 3 324 1
 1295 0010 C046     		nop
 1296 0012 BD46     		mov	sp, r7
 1297              		@ sp needed
 1298 0014 80BD     		pop	{r7, pc}
 1299              	.L68:
 1300 0016 C046     		.align	2
 1301              	.L67:
 1302 0018 90ED00E0 		.word	-536810096
 1303              		.cfi_endproc
 1304              	.LFE59:
 1306              		.section	.text.HAL_MPU_Enable,"ax",%progbits
 1307              		.align	1
 1308              		.global	HAL_MPU_Enable
 1309              		.syntax unified
 1310              		.code	16
 1311              		.thumb_func
 1313              	HAL_MPU_Enable:
 1314              	.LFB60:
 325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Enable the MPU.
 328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  MPU_Control Specifies the control mode of the MPU during hard fault,
 329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          NMI, FAULTMASK and privileged access to the default memory
 330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF_NONE
 332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *            @arg MPU_HARDFAULT_NMI
 333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *            @arg MPU_PRIVILEGED_DEFAULT
 334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF
 335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_MPU_Enable(uint32_t MPU_Control)
 339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 64


 1315              		.loc 3 339 1
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 8
 1318              		@ frame_needed = 1, uses_anonymous_args = 0
 1319 0000 80B5     		push	{r7, lr}
 1320              	.LCFI61:
 1321              		.cfi_def_cfa_offset 8
 1322              		.cfi_offset 7, -8
 1323              		.cfi_offset 14, -4
 1324 0002 82B0     		sub	sp, sp, #8
 1325              	.LCFI62:
 1326              		.cfi_def_cfa_offset 16
 1327 0004 00AF     		add	r7, sp, #0
 1328              	.LCFI63:
 1329              		.cfi_def_cfa_register 7
 1330 0006 7860     		str	r0, [r7, #4]
 340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Enable the MPU */
 341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 1331              		.loc 3 341 7
 1332 0008 074B     		ldr	r3, .L70
 1333              		.loc 3 341 30
 1334 000a 7A68     		ldr	r2, [r7, #4]
 1335 000c 0121     		movs	r1, #1
 1336 000e 0A43     		orrs	r2, r1
 1337              		.loc 3 341 16
 1338 0010 5A60     		str	r2, [r3, #4]
 1339              	.LBB26:
 1340              	.LBB27:
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1341              		.loc 2 879 3
 1342              		.syntax divided
 1343              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1344 0012 BFF34F8F 		dsb 0xF
 1345              	@ 0 "" 2
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1346              		.loc 2 880 1
 1347              		.thumb
 1348              		.syntax unified
 1349 0016 C046     		nop
 1350              	.LBE27:
 1351              	.LBE26:
 1352              	.LBB28:
 1353              	.LBB29:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1354              		.loc 2 868 3
 1355              		.syntax divided
 1356              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1357 0018 BFF36F8F 		isb 0xF
 1358              	@ 0 "" 2
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1359              		.loc 2 869 1
 1360              		.thumb
 1361              		.syntax unified
 1362 001c C046     		nop
 1363              	.LBE29:
 1364              	.LBE28:
 342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Data Synchronization Barrier setup */
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 65


 343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   __DSB();
 344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Instruction Synchronization Barrier setup */
 345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   __ISB();
 346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1365              		.loc 3 347 1
 1366 001e C046     		nop
 1367 0020 BD46     		mov	sp, r7
 1368 0022 02B0     		add	sp, sp, #8
 1369              		@ sp needed
 1370 0024 80BD     		pop	{r7, pc}
 1371              	.L71:
 1372 0026 C046     		.align	2
 1373              	.L70:
 1374 0028 90ED00E0 		.word	-536810096
 1375              		.cfi_endproc
 1376              	.LFE60:
 1378              		.section	.text.HAL_MPU_ConfigRegion,"ax",%progbits
 1379              		.align	1
 1380              		.global	HAL_MPU_ConfigRegion
 1381              		.syntax unified
 1382              		.code	16
 1383              		.thumb_func
 1385              	HAL_MPU_ConfigRegion:
 1386              	.LFB61:
 348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Initialize and configure the Region and the memory to be protected.
 351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
 352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *                the initialization and configuration information.
 353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
 356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 1387              		.loc 3 356 1
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 8
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391 0000 80B5     		push	{r7, lr}
 1392              	.LCFI64:
 1393              		.cfi_def_cfa_offset 8
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396 0002 82B0     		sub	sp, sp, #8
 1397              	.LCFI65:
 1398              		.cfi_def_cfa_offset 16
 1399 0004 00AF     		add	r7, sp, #0
 1400              	.LCFI66:
 1401              		.cfi_def_cfa_register 7
 1402 0006 7860     		str	r0, [r7, #4]
 357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Set the Region number */
 362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   MPU->RNR = MPU_Init->Number;
 1403              		.loc 3 362 22
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 66


 1404 0008 7B68     		ldr	r3, [r7, #4]
 1405 000a 5A79     		ldrb	r2, [r3, #5]
 1406              		.loc 3 362 6
 1407 000c 1B4B     		ldr	r3, .L76
 1408              		.loc 3 362 12
 1409 000e 9A60     		str	r2, [r3, #8]
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   if ((MPU_Init->Enable) == MPU_REGION_ENABLE)
 1410              		.loc 3 364 16
 1411 0010 7B68     		ldr	r3, [r7, #4]
 1412 0012 1B79     		ldrb	r3, [r3, #4]
 1413              		.loc 3 364 6
 1414 0014 012B     		cmp	r3, #1
 1415 0016 27D1     		bne	.L73
 365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   {
 366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Set the base adsress and set the 4 LSB to 0 */
 376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RBAR = (MPU_Init->BaseAddress) & 0xfffffff0U;
 1416              		.loc 3 376 26
 1417 0018 7B68     		ldr	r3, [r7, #4]
 1418 001a 1A68     		ldr	r2, [r3]
 1419              		.loc 3 376 8
 1420 001c 174B     		ldr	r3, .L76
 1421              		.loc 3 376 41
 1422 001e 0F21     		movs	r1, #15
 1423 0020 8A43     		bics	r2, r1
 1424              		.loc 3 376 15
 1425 0022 DA60     		str	r2, [r3, #12]
 377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Fill the field RASR */
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 1426              		.loc 3 379 36
 1427 0024 7B68     		ldr	r3, [r7, #4]
 1428 0026 9B7A     		ldrb	r3, [r3, #10]
 1429              		.loc 3 379 57
 1430 0028 1A07     		lsls	r2, r3, #28
 380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 1431              		.loc 3 380 36
 1432 002a 7B68     		ldr	r3, [r7, #4]
 1433 002c 5B7A     		ldrb	r3, [r3, #9]
 1434              		.loc 3 380 57
 1435 002e 1B06     		lsls	r3, r3, #24
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 1436              		.loc 3 379 79
 1437 0030 1A43     		orrs	r2, r3
 381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 1438              		.loc 3 381 36
 1439 0032 7B68     		ldr	r3, [r7, #4]
 1440 0034 DB7A     		ldrb	r3, [r3, #11]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 67


 1441              		.loc 3 381 57
 1442 0036 9B04     		lsls	r3, r3, #18
 380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 1443              		.loc 3 380 79
 1444 0038 1A43     		orrs	r2, r3
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 1445              		.loc 3 382 36
 1446 003a 7B68     		ldr	r3, [r7, #4]
 1447 003c 1B7B     		ldrb	r3, [r3, #12]
 1448              		.loc 3 382 57
 1449 003e 5B04     		lsls	r3, r3, #17
 381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 1450              		.loc 3 381 79
 1451 0040 1A43     		orrs	r2, r3
 383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 1452              		.loc 3 383 36
 1453 0042 7B68     		ldr	r3, [r7, #4]
 1454 0044 5B7B     		ldrb	r3, [r3, #13]
 1455              		.loc 3 383 57
 1456 0046 1B04     		lsls	r3, r3, #16
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 1457              		.loc 3 382 79
 1458 0048 1A43     		orrs	r2, r3
 384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 1459              		.loc 3 384 36
 1460 004a 7B68     		ldr	r3, [r7, #4]
 1461 004c DB79     		ldrb	r3, [r3, #7]
 1462              		.loc 3 384 57
 1463 004e 1B02     		lsls	r3, r3, #8
 383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 1464              		.loc 3 383 79
 1465 0050 1A43     		orrs	r2, r3
 385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 1466              		.loc 3 385 36
 1467 0052 7B68     		ldr	r3, [r7, #4]
 1468 0054 9B79     		ldrb	r3, [r3, #6]
 1469              		.loc 3 385 57
 1470 0056 5B00     		lsls	r3, r3, #1
 384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 1471              		.loc 3 384 79
 1472 0058 1A43     		orrs	r2, r3
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 1473              		.loc 3 386 36
 1474 005a 7B68     		ldr	r3, [r7, #4]
 1475 005c 1B79     		ldrb	r3, [r3, #4]
 1476              		.loc 3 386 57
 1477 005e 1900     		movs	r1, r3
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 1478              		.loc 3 379 8
 1479 0060 064B     		ldr	r3, .L76
 385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 1480              		.loc 3 385 79
 1481 0062 0A43     		orrs	r2, r1
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 1482              		.loc 3 379 15
 1483 0064 1A61     		str	r2, [r3, #16]
 387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 68


 388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   else
 389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   {
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RBAR = 0x00U;
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1484              		.loc 3 393 1
 1485 0066 05E0     		b	.L75
 1486              	.L73:
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 1487              		.loc 3 390 8
 1488 0068 044B     		ldr	r3, .L76
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 1489              		.loc 3 390 15
 1490 006a 0022     		movs	r2, #0
 1491 006c DA60     		str	r2, [r3, #12]
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 1492              		.loc 3 391 8
 1493 006e 034B     		ldr	r3, .L76
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 1494              		.loc 3 391 15
 1495 0070 0022     		movs	r2, #0
 1496 0072 1A61     		str	r2, [r3, #16]
 1497              	.L75:
 1498              		.loc 3 393 1
 1499 0074 C046     		nop
 1500 0076 BD46     		mov	sp, r7
 1501 0078 02B0     		add	sp, sp, #8
 1502              		@ sp needed
 1503 007a 80BD     		pop	{r7, pc}
 1504              	.L77:
 1505              		.align	2
 1506              	.L76:
 1507 007c 90ED00E0 		.word	-536810096
 1508              		.cfi_endproc
 1509              	.LFE61:
 1511              		.text
 1512              	.Letext0:
 1513              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l053xx.h"
 1514              		.file 5 "d:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1515              		.file 6 "d:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1516              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h"
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 69


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l0xx_hal_cortex.c
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:18     .text.__NVIC_EnableIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:23     .text.__NVIC_EnableIRQ:00000000 __NVIC_EnableIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:73     .text.__NVIC_EnableIRQ:00000030 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:78     .text.__NVIC_DisableIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:83     .text.__NVIC_DisableIRQ:00000000 __NVIC_DisableIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:160    .text.__NVIC_DisableIRQ:00000040 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:165    .text.__NVIC_GetPendingIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:170    .text.__NVIC_GetPendingIRQ:00000000 __NVIC_GetPendingIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:227    .text.__NVIC_GetPendingIRQ:0000003c $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:232    .text.__NVIC_SetPendingIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:237    .text.__NVIC_SetPendingIRQ:00000000 __NVIC_SetPendingIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:287    .text.__NVIC_SetPendingIRQ:00000034 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:292    .text.__NVIC_ClearPendingIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:297    .text.__NVIC_ClearPendingIRQ:00000000 __NVIC_ClearPendingIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:347    .text.__NVIC_ClearPendingIRQ:00000034 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:352    .text.__NVIC_SetPriority:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:357    .text.__NVIC_SetPriority:00000000 __NVIC_SetPriority
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:517    .text.__NVIC_SetPriority:000000d4 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:523    .text.__NVIC_GetPriority:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:528    .text.__NVIC_GetPriority:00000000 __NVIC_GetPriority
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:620    .text.__NVIC_GetPriority:00000074 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:626    .text.__NVIC_SystemReset:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:631    .text.__NVIC_SystemReset:00000000 __NVIC_SystemReset
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:688    .text.__NVIC_SystemReset:0000001c $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:694    .text.SysTick_Config:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:699    .text.SysTick_Config:00000000 SysTick_Config
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:764    .text.SysTick_Config:00000044 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:769    .text.HAL_NVIC_SetPriority:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:775    .text.HAL_NVIC_SetPriority:00000000 HAL_NVIC_SetPriority
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:817    .text.HAL_NVIC_EnableIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:823    .text.HAL_NVIC_EnableIRQ:00000000 HAL_NVIC_EnableIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:859    .text.HAL_NVIC_DisableIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:865    .text.HAL_NVIC_DisableIRQ:00000000 HAL_NVIC_DisableIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:901    .text.HAL_NVIC_SystemReset:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:907    .text.HAL_NVIC_SystemReset:00000000 HAL_NVIC_SystemReset
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:927    .text.HAL_SYSTICK_Config:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:933    .text.HAL_SYSTICK_Config:00000000 HAL_SYSTICK_Config
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:966    .text.HAL_NVIC_GetPriority:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:972    .text.HAL_NVIC_GetPriority:00000000 HAL_NVIC_GetPriority
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1009   .text.HAL_NVIC_SetPendingIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1015   .text.HAL_NVIC_SetPendingIRQ:00000000 HAL_NVIC_SetPendingIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1051   .text.HAL_NVIC_GetPendingIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1057   .text.HAL_NVIC_GetPendingIRQ:00000000 HAL_NVIC_GetPendingIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1094   .text.HAL_NVIC_ClearPendingIRQ:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1100   .text.HAL_NVIC_ClearPendingIRQ:00000000 HAL_NVIC_ClearPendingIRQ
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1136   .text.HAL_SYSTICK_CLKSourceConfig:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1142   .text.HAL_SYSTICK_CLKSourceConfig:00000000 HAL_SYSTICK_CLKSourceConfig
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1191   .text.HAL_SYSTICK_CLKSourceConfig:00000030 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1196   .text.HAL_SYSTICK_IRQHandler:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1202   .text.HAL_SYSTICK_IRQHandler:00000000 HAL_SYSTICK_IRQHandler
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1233   .text.HAL_SYSTICK_Callback:00000000 HAL_SYSTICK_Callback
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1227   .text.HAL_SYSTICK_Callback:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1256   .text.HAL_MPU_Disable:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1262   .text.HAL_MPU_Disable:00000000 HAL_MPU_Disable
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1302   .text.HAL_MPU_Disable:00000018 $d
ARM GAS  C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s 			page 70


C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1307   .text.HAL_MPU_Enable:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1313   .text.HAL_MPU_Enable:00000000 HAL_MPU_Enable
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1374   .text.HAL_MPU_Enable:00000028 $d
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1379   .text.HAL_MPU_ConfigRegion:00000000 $t
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1385   .text.HAL_MPU_ConfigRegion:00000000 HAL_MPU_ConfigRegion
C:\Users\lidka\AppData\Local\Temp\cc7N4GYv.s:1507   .text.HAL_MPU_ConfigRegion:0000007c $d

NO UNDEFINED SYMBOLS

ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l0xx_hal_uart_ex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RS485Ex_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_RS485Ex_Init
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	HAL_RS485Ex_Init:
  25              	.LFB47:
  26              		.file 1 "Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c"
   1:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @file    stm32l0xx_hal_uart_ex.c
   4:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief   Extended UART HAL module driver.
   6:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          This file provides firmware functions to manage the following extended
   7:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *           + Peripheral Control functions
  10:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *
  11:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *
  12:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   @verbatim
  13:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ==============================================================================
  14:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****                ##### UART peripheral extended features  #####
  15:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ==============================================================================
  16:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  17:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  18:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  19:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     (#) For the UART RS485 Driver Enable mode, initialize the UART registers
  20:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         by calling the HAL_RS485Ex_Init() API.
  21:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  22:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   @endverbatim
  23:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ******************************************************************************
  24:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @attention
  25:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *
  26:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  27:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * All rights reserved.</center></h2>
  28:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *
  29:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  30:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * the "License"; You may not use this file except in compliance with the
  31:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * License. You may obtain a copy of the License at:
  32:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 2


  33:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *
  34:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ******************************************************************************
  35:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
  36:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  37:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /* Includes ------------------------------------------------------------------*/
  38:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** #include "stm32l0xx_hal.h"
  39:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  40:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /** @addtogroup STM32L0xx_HAL_Driver
  41:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @{
  42:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
  43:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  44:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /** @defgroup UARTEx UARTEx
  45:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief UART Extended HAL module driver
  46:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @{
  47:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
  48:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  49:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** #ifdef HAL_UART_MODULE_ENABLED
  50:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  51:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /* Private typedef -----------------------------------------------------------*/
  52:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /* Private define ------------------------------------------------------------*/
  53:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  54:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /* Private macros ------------------------------------------------------------*/
  55:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /* Private variables ---------------------------------------------------------*/
  56:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /* Private function prototypes -----------------------------------------------*/
  57:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Private_Functions UARTEx Private Functions
  58:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @{
  59:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
  60:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
  61:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
  62:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @}
  63:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
  64:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  65:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /* Exported functions --------------------------------------------------------*/
  66:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  67:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions  UARTEx Exported Functions
  68:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @{
  69:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
  70:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
  71:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group1 Initialization and de-initialization functions
  72:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief    Extended Initialization and Configuration Functions
  73:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *
  74:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** @verbatim
  75:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** ===============================================================================
  76:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****             ##### Initialization and Configuration functions #####
  77:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****  ===============================================================================
  78:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     [..]
  79:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
  80:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     in asynchronous mode.
  81:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       (+) For the asynchronous mode the parameters below can be configured:
  82:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) Baud Rate
  83:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) Word Length
  84:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) Stop Bit
  85:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
  86:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****              in the data register is transmitted but is changed by the parity bit.
  87:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) Hardware flow control
  88:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) Receiver/transmitter modes
  89:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) Over Sampling Method
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 3


  90:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) One-Bit Sampling Method
  91:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
  92:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) TX and/or RX pin level inversion
  93:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) data logical level inversion
  94:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) RX and TX pins swap
  95:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) RX overrun detection disabling
  96:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) DMA disabling on RX error
  97:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) MSB first on communication line
  98:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (++) auto Baud rate detection
  99:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     [..]
 100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     The HAL_RS485Ex_Init() API follows the UART RS485 mode configuration
 101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****      procedures (details for the procedures are available in reference manual).
 102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** @endverbatim
 104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   following table.
 108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     Table 1. UART frame format.
 110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |---------|---------|-----------|---------------------------------------|
 123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     +-----------------------------------------------------------------------+
 125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @{
 127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief Initialize the RS485 Driver enable feature according to the specified
 131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *         parameters in the UART_InitTypeDef and creates the associated handle.
 132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart            UART handle.
 133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param Polarity         Select the driver enable polarity.
 134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_HIGH DE signal is active high
 136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          @arg @ref UART_DE_POLARITY_LOW  DE signal is active low
 137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param AssertionTime    Driver Enable assertion time:
 138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *       5-bit value defining the time between the activation of the DE (Driver Enable)
 139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *       signal and the beginning of the start bit. It is expressed in sample time
 140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *       units (1/8 or 1/16 bit time, depending on the oversampling rate)
 141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param DeassertionTime  Driver Enable deassertion time:
 142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *       5-bit value defining the time between the end of the last stop bit, in a
 143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *       transmitted message, and the de-activation of the DE (Driver Enable) signal.
 144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *       It is expressed in sample time units (1/8 or 1/16 bit time, depending on the
 145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *       oversampling rate).
 146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 4


 147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t Assertion
 149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****                                    uint32_t DeassertionTime)
 150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
  27              		.loc 1 150 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 86B0     		sub	sp, sp, #24
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 32
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 F860     		str	r0, [r7, #12]
  43 0008 B960     		str	r1, [r7, #8]
  44 000a 7A60     		str	r2, [r7, #4]
  45 000c 3B60     		str	r3, [r7]
 151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   uint32_t temp;
 152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (huart == NULL)
  46              		.loc 1 154 6
  47 000e FB68     		ldr	r3, [r7, #12]
  48 0010 002B     		cmp	r3, #0
  49 0012 01D1     		bne	.L2
 155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return HAL_ERROR;
  50              		.loc 1 156 12
  51 0014 0123     		movs	r3, #1
  52 0016 5BE0     		b	.L3
  53              	.L2:
 157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check the Driver Enable UART instance */
 159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check the Driver Enable polarity */
 162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   assert_param(IS_UART_DE_POLARITY(Polarity));
 163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check the Driver Enable assertion time */
 165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check the Driver Enable deassertion time */
 168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  54              		.loc 1 170 12
  55 0018 FB68     		ldr	r3, [r7, #12]
  56 001a 9B6F     		ldr	r3, [r3, #120]
  57              		.loc 1 170 6
  58 001c 002B     		cmp	r3, #0
  59 001e 07D1     		bne	.L4
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 5


 171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Allocate lock resource and initialize it */
 173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->Lock = HAL_UNLOCKED;
  60              		.loc 1 173 17
  61 0020 FB68     		ldr	r3, [r7, #12]
  62 0022 7422     		movs	r2, #116
  63 0024 0021     		movs	r1, #0
  64 0026 9954     		strb	r1, [r3, r2]
 174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     UART_InitCallbacksToDefault(huart);
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if (huart->MspInitCallback == NULL)
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Init the low level hardware */
 184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->MspInitCallback(huart);
 185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** #else
 186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX */
 187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     HAL_UART_MspInit(huart);
  65              		.loc 1 187 5
  66 0028 FB68     		ldr	r3, [r7, #12]
  67 002a 1800     		movs	r0, r3
  68 002c FFF7FEFF 		bl	HAL_UART_MspInit
  69              	.L4:
 188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
  70              		.loc 1 191 17
  71 0030 FB68     		ldr	r3, [r7, #12]
  72 0032 2422     		movs	r2, #36
  73 0034 9A67     		str	r2, [r3, #120]
 192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
  74              		.loc 1 194 3
  75 0036 FB68     		ldr	r3, [r7, #12]
  76 0038 1B68     		ldr	r3, [r3]
  77 003a 1A68     		ldr	r2, [r3]
  78 003c FB68     		ldr	r3, [r7, #12]
  79 003e 1B68     		ldr	r3, [r3]
  80 0040 0121     		movs	r1, #1
  81 0042 8A43     		bics	r2, r1
  82 0044 1A60     		str	r2, [r3]
 195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set the UART Communication parameters */
 197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
  83              		.loc 1 197 7
  84 0046 FB68     		ldr	r3, [r7, #12]
  85 0048 1800     		movs	r0, r3
  86 004a FFF7FEFF 		bl	UART_SetConfig
  87 004e 0300     		movs	r3, r0
  88              		.loc 1 197 6
  89 0050 012B     		cmp	r3, #1
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 6


  90 0052 01D1     		bne	.L5
 198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return HAL_ERROR;
  91              		.loc 1 199 12
  92 0054 0123     		movs	r3, #1
  93 0056 3BE0     		b	.L3
  94              	.L5:
 200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  95              		.loc 1 202 26
  96 0058 FB68     		ldr	r3, [r7, #12]
  97 005a 5B6A     		ldr	r3, [r3, #36]
  98              		.loc 1 202 6
  99 005c 002B     		cmp	r3, #0
 100 005e 03D0     		beq	.L6
 203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     UART_AdvFeatureConfig(huart);
 101              		.loc 1 204 5
 102 0060 FB68     		ldr	r3, [r7, #12]
 103 0062 1800     		movs	r0, r3
 104 0064 FFF7FEFF 		bl	UART_AdvFeatureConfig
 105              	.L6:
 205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
 208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 106              		.loc 1 208 3
 107 0068 FB68     		ldr	r3, [r7, #12]
 108 006a 1B68     		ldr	r3, [r3]
 109 006c 9A68     		ldr	r2, [r3, #8]
 110 006e FB68     		ldr	r3, [r7, #12]
 111 0070 1B68     		ldr	r3, [r3]
 112 0072 8021     		movs	r1, #128
 113 0074 C901     		lsls	r1, r1, #7
 114 0076 0A43     		orrs	r2, r1
 115 0078 9A60     		str	r2, [r3, #8]
 209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set the Driver Enable polarity */
 211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 116              		.loc 1 211 3
 117 007a FB68     		ldr	r3, [r7, #12]
 118 007c 1B68     		ldr	r3, [r3]
 119 007e 9B68     		ldr	r3, [r3, #8]
 120 0080 154A     		ldr	r2, .L7
 121 0082 1340     		ands	r3, r2
 122 0084 1900     		movs	r1, r3
 123 0086 FB68     		ldr	r3, [r7, #12]
 124 0088 1B68     		ldr	r3, [r3]
 125 008a BA68     		ldr	r2, [r7, #8]
 126 008c 0A43     		orrs	r2, r1
 127 008e 9A60     		str	r2, [r3, #8]
 212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set the Driver Enable assertion and deassertion times */
 214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 128              		.loc 1 214 8
 129 0090 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 7


 130 0092 5B05     		lsls	r3, r3, #21
 131 0094 7B61     		str	r3, [r7, #20]
 215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 132              		.loc 1 215 28
 133 0096 3B68     		ldr	r3, [r7]
 134 0098 1B04     		lsls	r3, r3, #16
 135              		.loc 1 215 8
 136 009a 7A69     		ldr	r2, [r7, #20]
 137 009c 1343     		orrs	r3, r2
 138 009e 7B61     		str	r3, [r7, #20]
 216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 139              		.loc 1 216 3
 140 00a0 FB68     		ldr	r3, [r7, #12]
 141 00a2 1B68     		ldr	r3, [r3]
 142 00a4 1B68     		ldr	r3, [r3]
 143 00a6 0D4A     		ldr	r2, .L7+4
 144 00a8 1340     		ands	r3, r2
 145 00aa 1900     		movs	r1, r3
 146 00ac FB68     		ldr	r3, [r7, #12]
 147 00ae 1B68     		ldr	r3, [r3]
 148 00b0 7A69     		ldr	r2, [r7, #20]
 149 00b2 0A43     		orrs	r2, r1
 150 00b4 1A60     		str	r2, [r3]
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 151              		.loc 1 219 3
 152 00b6 FB68     		ldr	r3, [r7, #12]
 153 00b8 1B68     		ldr	r3, [r3]
 154 00ba 1A68     		ldr	r2, [r3]
 155 00bc FB68     		ldr	r3, [r7, #12]
 156 00be 1B68     		ldr	r3, [r3]
 157 00c0 0121     		movs	r1, #1
 158 00c2 0A43     		orrs	r2, r1
 159 00c4 1A60     		str	r2, [r3]
 220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 160              		.loc 1 222 11
 161 00c6 FB68     		ldr	r3, [r7, #12]
 162 00c8 1800     		movs	r0, r3
 163 00ca FFF7FEFF 		bl	UART_CheckIdleState
 164 00ce 0300     		movs	r3, r0
 165              	.L3:
 223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 166              		.loc 1 223 1
 167 00d0 1800     		movs	r0, r3
 168 00d2 BD46     		mov	sp, r7
 169 00d4 06B0     		add	sp, sp, #24
 170              		@ sp needed
 171 00d6 80BD     		pop	{r7, pc}
 172              	.L8:
 173              		.align	2
 174              	.L7:
 175 00d8 FF7FFFFF 		.word	-32769
 176 00dc FFFF00FC 		.word	-67043329
 177              		.cfi_endproc
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 8


 178              	.LFE47:
 180              		.section	.text.HAL_UARTEx_WakeupCallback,"ax",%progbits
 181              		.align	1
 182              		.weak	HAL_UARTEx_WakeupCallback
 183              		.syntax unified
 184              		.code	16
 185              		.thumb_func
 187              	HAL_UARTEx_WakeupCallback:
 188              	.LFB48:
 224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @}
 227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group2 IO operation functions
 230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *  @brief Extended functions
 231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *
 232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** @verbatim
 233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****  ===============================================================================
 234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****                       ##### IO operation functions #####
 235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****  ===============================================================================
 236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     This subsection provides a set of Wakeup and FIFO mode related callback functions.
 237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     (#) Wakeup from Stop mode Callback:
 239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_WakeupCallback()
 240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** @endverbatim
 242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @{
 243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief UART wakeup from Stop mode callback.
 247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart UART handle.
 248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval None
 249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
 251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 189              		.loc 1 251 1
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 80B5     		push	{r7, lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 82B0     		sub	sp, sp, #8
 199              	.LCFI4:
 200              		.cfi_def_cfa_offset 16
 201 0004 00AF     		add	r7, sp, #0
 202              	.LCFI5:
 203              		.cfi_def_cfa_register 7
 204 0006 7860     		str	r0, [r7, #4]
 252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Prevent unused argument(s) compilation warning */
 253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   UNUSED(huart);
 254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 9


 256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****             the HAL_UARTEx_WakeupCallback can be implemented in the user file.
 257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****    */
 258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 205              		.loc 1 258 1
 206 0008 C046     		nop
 207 000a BD46     		mov	sp, r7
 208 000c 02B0     		add	sp, sp, #8
 209              		@ sp needed
 210 000e 80BD     		pop	{r7, pc}
 211              		.cfi_endproc
 212              	.LFE48:
 214              		.section	.text.HAL_UARTEx_EnableClockStopMode,"ax",%progbits
 215              		.align	1
 216              		.global	HAL_UARTEx_EnableClockStopMode
 217              		.syntax unified
 218              		.code	16
 219              		.thumb_func
 221              	HAL_UARTEx_EnableClockStopMode:
 222              	.LFB49:
 259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @}
 263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /** @defgroup UARTEx_Exported_Functions_Group3 Peripheral Control functions
 266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief    Extended Peripheral Control functions
 267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *
 268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** @verbatim
 269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****  ===============================================================================
 270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****                       ##### Peripheral Control functions #####
 271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****  ===============================================================================
 272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     [..] This section provides the following functions:
 273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableClockStopMode() API enables the UART clock (HSI or LSE only) during stop 
 274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableClockStopMode() API disables the above functionality
 275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****      (+) HAL_MultiProcessorEx_AddressLength_Set() API optionally sets the UART node address
 276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****          detection length to more than 4 bits for multiprocessor address mark wake up.
 277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_StopModeWakeUpSourceConfig() API defines the wake-up from stop mode
 278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****          trigger: address match, Start Bit detection or RXNE bit status.
 279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_EnableStopMode() API enables the UART to wake up the MCU from stop mode
 280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****      (+) HAL_UARTEx_DisableStopMode() API disables the above functionality
 281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     services to user. (For example, these functions allow application to handle use cases
 284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     where number of data to be received is unknown).
 285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     (#) Compared to standard reception services which only consider number of received
 287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         data elements as reception completion criteria, these functions also consider additional ev
 288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         as triggers for updating reception status to caller :
 289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****                for 1 frame time, after last received byte.
 292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           (++) RX inactivity detected by RTO, i.e. line has been in idle state
 293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****                for a programmable time, after last received byte.
 294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        (+) Detection that a specific character has been received.
 295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     (#) There are two mode of transfer:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 10


 297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            are returned by function after finishing transfer.
 301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            These API's return the HAL status.
 303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            The end of the data processing will be indicated through the
 304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     (#) Blocking mode API:
 309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     (#) Non-Blocking mode API with Interrupt:
 312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     (#) Non-Blocking mode API with DMA:
 315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** @endverbatim
 318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @{
 319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief  Keep UART Clock enabled when in Stop Mode.
 323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note   When the USART clock source is configured to be LSE or HSI, it is possible to keep enab
 324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *         this clock during STOP mode by setting the UCESM bit in USART_CR3 control register.
 325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note   When LPUART is used to wakeup from stop with LSE is selected as LPUART clock source,
 326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *         and desired baud rate is 9600 baud, the bit UCESM bit in LPUART_CR3 control register mu
 327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param  huart UART handle.
 328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
 331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 223              		.loc 1 331 1
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 24
 226              		@ frame_needed = 1, uses_anonymous_args = 0
 227 0000 80B5     		push	{r7, lr}
 228              	.LCFI6:
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 7, -8
 231              		.cfi_offset 14, -4
 232 0002 86B0     		sub	sp, sp, #24
 233              	.LCFI7:
 234              		.cfi_def_cfa_offset 32
 235 0004 00AF     		add	r7, sp, #0
 236              	.LCFI8:
 237              		.cfi_def_cfa_register 7
 238 0006 7860     		str	r0, [r7, #4]
 332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Locked */
 333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 239              		.loc 1 333 3
 240 0008 7B68     		ldr	r3, [r7, #4]
 241 000a 7422     		movs	r2, #116
 242 000c 9B5C     		ldrb	r3, [r3, r2]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 11


 243 000e 012B     		cmp	r3, #1
 244 0010 01D1     		bne	.L11
 245              		.loc 1 333 3 is_stmt 0 discriminator 1
 246 0012 0223     		movs	r3, #2
 247 0014 22E0     		b	.L12
 248              	.L11:
 249              		.loc 1 333 3 discriminator 2
 250 0016 7B68     		ldr	r3, [r7, #4]
 251 0018 7422     		movs	r2, #116
 252 001a 0121     		movs	r1, #1
 253 001c 9954     		strb	r1, [r3, r2]
 254              	.LBB44:
 255              	.LBB45:
 256              	.LBB46:
 257              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 12


  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 13


 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 14


 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 15


 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 16


 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 17


 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 18


 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 258              		.loc 2 386 3 is_stmt 1 discriminator 2
 259              		.syntax divided
 260              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 261 001e EFF31083 		MRS r3, primask
 262              	@ 0 "" 2
 263              		.thumb
 264              		.syntax unified
 265 0022 BB60     		str	r3, [r7, #8]
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 266              		.loc 2 387 9 discriminator 2
 267 0024 BB68     		ldr	r3, [r7, #8]
 268              	.LBE46:
 269              	.LBE45:
 334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set UCESM bit */
 336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 270              		.loc 1 336 3 discriminator 2
 271 0026 7B61     		str	r3, [r7, #20]
 272 0028 0123     		movs	r3, #1
 273 002a FB60     		str	r3, [r7, #12]
 274              	.LBB47:
 275              	.LBB48:
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 276              		.loc 2 414 3 discriminator 2
 277 002c FB68     		ldr	r3, [r7, #12]
 278              		.syntax divided
 279              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 280 002e 83F31088 		MSR primask, r3
 281              	@ 0 "" 2
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 19


 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 282              		.loc 2 415 1 discriminator 2
 283              		.thumb
 284              		.syntax unified
 285 0032 C046     		nop
 286              	.LBE48:
 287              	.LBE47:
 288              		.loc 1 336 3 discriminator 2
 289 0034 7B68     		ldr	r3, [r7, #4]
 290 0036 1B68     		ldr	r3, [r3]
 291 0038 9A68     		ldr	r2, [r3, #8]
 292 003a 7B68     		ldr	r3, [r7, #4]
 293 003c 1B68     		ldr	r3, [r3]
 294 003e 8021     		movs	r1, #128
 295 0040 0904     		lsls	r1, r1, #16
 296 0042 0A43     		orrs	r2, r1
 297 0044 9A60     		str	r2, [r3, #8]
 298 0046 7B69     		ldr	r3, [r7, #20]
 299 0048 3B61     		str	r3, [r7, #16]
 300              	.LBB49:
 301              	.LBB50:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 302              		.loc 2 414 3 discriminator 2
 303 004a 3B69     		ldr	r3, [r7, #16]
 304              		.syntax divided
 305              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 306 004c 83F31088 		MSR primask, r3
 307              	@ 0 "" 2
 308              		.loc 2 415 1 discriminator 2
 309              		.thumb
 310              		.syntax unified
 311 0050 C046     		nop
 312              	.LBE50:
 313              	.LBE49:
 314              	.LBE44:
 337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Unlocked */
 339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 315              		.loc 1 339 3 discriminator 2
 316 0052 7B68     		ldr	r3, [r7, #4]
 317 0054 7422     		movs	r2, #116
 318 0056 0021     		movs	r1, #0
 319 0058 9954     		strb	r1, [r3, r2]
 340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   return HAL_OK;
 320              		.loc 1 341 10 discriminator 2
 321 005a 0023     		movs	r3, #0
 322              	.L12:
 342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 323              		.loc 1 342 1
 324 005c 1800     		movs	r0, r3
 325 005e BD46     		mov	sp, r7
 326 0060 06B0     		add	sp, sp, #24
 327              		@ sp needed
 328 0062 80BD     		pop	{r7, pc}
 329              		.cfi_endproc
 330              	.LFE49:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 20


 332              		.section	.text.HAL_UARTEx_DisableClockStopMode,"ax",%progbits
 333              		.align	1
 334              		.global	HAL_UARTEx_DisableClockStopMode
 335              		.syntax unified
 336              		.code	16
 337              		.thumb_func
 339              	HAL_UARTEx_DisableClockStopMode:
 340              	.LFB50:
 343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief  Disable UART Clock when in Stop Mode.
 346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param  huart UART handle.
 347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
 350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 341              		.loc 1 350 1
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 24
 344              		@ frame_needed = 1, uses_anonymous_args = 0
 345 0000 80B5     		push	{r7, lr}
 346              	.LCFI9:
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 7, -8
 349              		.cfi_offset 14, -4
 350 0002 86B0     		sub	sp, sp, #24
 351              	.LCFI10:
 352              		.cfi_def_cfa_offset 32
 353 0004 00AF     		add	r7, sp, #0
 354              	.LCFI11:
 355              		.cfi_def_cfa_register 7
 356 0006 7860     		str	r0, [r7, #4]
 351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Locked */
 352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 357              		.loc 1 352 3
 358 0008 7B68     		ldr	r3, [r7, #4]
 359 000a 7422     		movs	r2, #116
 360 000c 9B5C     		ldrb	r3, [r3, r2]
 361 000e 012B     		cmp	r3, #1
 362 0010 01D1     		bne	.L15
 363              		.loc 1 352 3 is_stmt 0 discriminator 1
 364 0012 0223     		movs	r3, #2
 365 0014 21E0     		b	.L16
 366              	.L15:
 367              		.loc 1 352 3 discriminator 2
 368 0016 7B68     		ldr	r3, [r7, #4]
 369 0018 7422     		movs	r2, #116
 370 001a 0121     		movs	r1, #1
 371 001c 9954     		strb	r1, [r3, r2]
 372              	.LBB51:
 373              	.LBB52:
 374              	.LBB53:
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 375              		.loc 2 386 3 is_stmt 1 discriminator 2
 376              		.syntax divided
 377              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 378 001e EFF31083 		MRS r3, primask
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 21


 379              	@ 0 "" 2
 380              		.thumb
 381              		.syntax unified
 382 0022 BB60     		str	r3, [r7, #8]
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 383              		.loc 2 387 9 discriminator 2
 384 0024 BB68     		ldr	r3, [r7, #8]
 385              	.LBE53:
 386              	.LBE52:
 353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Clear UCESM bit */
 355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 387              		.loc 1 355 3 discriminator 2
 388 0026 7B61     		str	r3, [r7, #20]
 389 0028 0123     		movs	r3, #1
 390 002a FB60     		str	r3, [r7, #12]
 391              	.LBB54:
 392              	.LBB55:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 393              		.loc 2 414 3 discriminator 2
 394 002c FB68     		ldr	r3, [r7, #12]
 395              		.syntax divided
 396              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 397 002e 83F31088 		MSR primask, r3
 398              	@ 0 "" 2
 399              		.loc 2 415 1 discriminator 2
 400              		.thumb
 401              		.syntax unified
 402 0032 C046     		nop
 403              	.LBE55:
 404              	.LBE54:
 405              		.loc 1 355 3 discriminator 2
 406 0034 7B68     		ldr	r3, [r7, #4]
 407 0036 1B68     		ldr	r3, [r3]
 408 0038 9A68     		ldr	r2, [r3, #8]
 409 003a 7B68     		ldr	r3, [r7, #4]
 410 003c 1B68     		ldr	r3, [r3]
 411 003e 0949     		ldr	r1, .L18
 412 0040 0A40     		ands	r2, r1
 413 0042 9A60     		str	r2, [r3, #8]
 414 0044 7B69     		ldr	r3, [r7, #20]
 415 0046 3B61     		str	r3, [r7, #16]
 416              	.LBB56:
 417              	.LBB57:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 418              		.loc 2 414 3 discriminator 2
 419 0048 3B69     		ldr	r3, [r7, #16]
 420              		.syntax divided
 421              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 422 004a 83F31088 		MSR primask, r3
 423              	@ 0 "" 2
 424              		.loc 2 415 1 discriminator 2
 425              		.thumb
 426              		.syntax unified
 427 004e C046     		nop
 428              	.LBE57:
 429              	.LBE56:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 22


 430              	.LBE51:
 356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Unlocked */
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 431              		.loc 1 358 3 discriminator 2
 432 0050 7B68     		ldr	r3, [r7, #4]
 433 0052 7422     		movs	r2, #116
 434 0054 0021     		movs	r1, #0
 435 0056 9954     		strb	r1, [r3, r2]
 359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   return HAL_OK;
 436              		.loc 1 360 10 discriminator 2
 437 0058 0023     		movs	r3, #0
 438              	.L16:
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 439              		.loc 1 361 1
 440 005a 1800     		movs	r0, r3
 441 005c BD46     		mov	sp, r7
 442 005e 06B0     		add	sp, sp, #24
 443              		@ sp needed
 444 0060 80BD     		pop	{r7, pc}
 445              	.L19:
 446 0062 C046     		.align	2
 447              	.L18:
 448 0064 FFFF7FFF 		.word	-8388609
 449              		.cfi_endproc
 450              	.LFE50:
 452              		.section	.text.HAL_MultiProcessorEx_AddressLength_Set,"ax",%progbits
 453              		.align	1
 454              		.global	HAL_MultiProcessorEx_AddressLength_Set
 455              		.syntax unified
 456              		.code	16
 457              		.thumb_func
 459              	HAL_MultiProcessorEx_AddressLength_Set:
 460              	.LFB51:
 362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief By default in multiprocessor mode, when the wake up method is set
 365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        to address mark, the UART handles only 4-bit long addresses detection;
 366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        this API allows to enable longer addresses detection (6-, 7- or 8-bit
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        long).
 368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  Addresses detection lengths are: 6-bit address detection in 7-bit data mode,
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        7-bit address detection in 8-bit data mode, 8-bit address detection in 9-bit data mode.
 370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart         UART handle.
 371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param AddressLength This parameter can be one of the following values:
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
 373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
 374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t Addres
 377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 461              		.loc 1 377 1
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 8
 464              		@ frame_needed = 1, uses_anonymous_args = 0
 465 0000 80B5     		push	{r7, lr}
 466              	.LCFI12:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 23


 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 0002 82B0     		sub	sp, sp, #8
 471              	.LCFI13:
 472              		.cfi_def_cfa_offset 16
 473 0004 00AF     		add	r7, sp, #0
 474              	.LCFI14:
 475              		.cfi_def_cfa_register 7
 476 0006 7860     		str	r0, [r7, #4]
 477 0008 3960     		str	r1, [r7]
 378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check the UART handle allocation */
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (huart == NULL)
 478              		.loc 1 379 6
 479 000a 7B68     		ldr	r3, [r7, #4]
 480 000c 002B     		cmp	r3, #0
 481 000e 01D1     		bne	.L21
 380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return HAL_ERROR;
 482              		.loc 1 381 12
 483 0010 0123     		movs	r3, #1
 484 0012 22E0     		b	.L22
 485              	.L21:
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check the address length parameter */
 385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 486              		.loc 1 387 17
 487 0014 7B68     		ldr	r3, [r7, #4]
 488 0016 2422     		movs	r2, #36
 489 0018 9A67     		str	r2, [r3, #120]
 388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
 490              		.loc 1 390 3
 491 001a 7B68     		ldr	r3, [r7, #4]
 492 001c 1B68     		ldr	r3, [r3]
 493 001e 1A68     		ldr	r2, [r3]
 494 0020 7B68     		ldr	r3, [r7, #4]
 495 0022 1B68     		ldr	r3, [r3]
 496 0024 0121     		movs	r1, #1
 497 0026 8A43     		bics	r2, r1
 498 0028 1A60     		str	r2, [r3]
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set the address length */
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 499              		.loc 1 393 3
 500 002a 7B68     		ldr	r3, [r7, #4]
 501 002c 1B68     		ldr	r3, [r3]
 502 002e 5B68     		ldr	r3, [r3, #4]
 503 0030 1022     		movs	r2, #16
 504 0032 9343     		bics	r3, r2
 505 0034 1900     		movs	r1, r3
 506 0036 7B68     		ldr	r3, [r7, #4]
 507 0038 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 24


 508 003a 3A68     		ldr	r2, [r7]
 509 003c 0A43     		orrs	r2, r1
 510 003e 5A60     		str	r2, [r3, #4]
 394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 511              		.loc 1 396 3
 512 0040 7B68     		ldr	r3, [r7, #4]
 513 0042 1B68     		ldr	r3, [r3]
 514 0044 1A68     		ldr	r2, [r3]
 515 0046 7B68     		ldr	r3, [r7, #4]
 516 0048 1B68     		ldr	r3, [r3]
 517 004a 0121     		movs	r1, #1
 518 004c 0A43     		orrs	r2, r1
 519 004e 1A60     		str	r2, [r3]
 397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* TEACK and/or REACK to check before moving huart->gState to Ready */
 399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   return (UART_CheckIdleState(huart));
 520              		.loc 1 399 11
 521 0050 7B68     		ldr	r3, [r7, #4]
 522 0052 1800     		movs	r0, r3
 523 0054 FFF7FEFF 		bl	UART_CheckIdleState
 524 0058 0300     		movs	r3, r0
 525              	.L22:
 400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 526              		.loc 1 400 1
 527 005a 1800     		movs	r0, r3
 528 005c BD46     		mov	sp, r7
 529 005e 02B0     		add	sp, sp, #8
 530              		@ sp needed
 531 0060 80BD     		pop	{r7, pc}
 532              		.cfi_endproc
 533              	.LFE51:
 535              		.section	.text.HAL_UARTEx_StopModeWakeUpSourceConfig,"ax",%progbits
 536              		.align	1
 537              		.global	HAL_UARTEx_StopModeWakeUpSourceConfig
 538              		.syntax unified
 539              		.code	16
 540              		.thumb_func
 542              	HAL_UARTEx_StopModeWakeUpSourceConfig:
 543              	.LFB52:
 401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief Set Wakeup from Stop mode interrupt flag selection.
 404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note It is the application responsibility to enable the interrupt used as
 405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *       usart_wkup interrupt source before entering low-power mode.
 406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart           UART handle.
 407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param WakeUpSelection Address match, Start Bit detection or RXNE/RXFNE bit status.
 408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          This parameter can be one of the following values:
 409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_ADDRESS
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_STARTBIT
 411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
 412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeD
 415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 544              		.loc 1 415 1
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 25


 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 24
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548 0000 80B5     		push	{r7, lr}
 549              	.LCFI15:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 88B0     		sub	sp, sp, #32
 554              	.LCFI16:
 555              		.cfi_def_cfa_offset 40
 556 0004 02AF     		add	r7, sp, #8
 557              	.LCFI17:
 558              		.cfi_def_cfa 7, 32
 559 0006 F860     		str	r0, [r7, #12]
 560 0008 3B1D     		adds	r3, r7, #4
 561 000a 1960     		str	r1, [r3]
 562 000c 5A60     		str	r2, [r3, #4]
 416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 563              		.loc 1 416 21
 564 000e 1723     		movs	r3, #23
 565 0010 FB18     		adds	r3, r7, r3
 566 0012 0022     		movs	r2, #0
 567 0014 1A70     		strb	r2, [r3]
 417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   uint32_t tickstart;
 418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* check the wake-up from stop mode UART instance */
 420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
 421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* check the wake-up selection parameter */
 422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));
 423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Locked */
 425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 568              		.loc 1 425 3
 569 0016 FB68     		ldr	r3, [r7, #12]
 570 0018 7422     		movs	r2, #116
 571 001a 9B5C     		ldrb	r3, [r3, r2]
 572 001c 012B     		cmp	r3, #1
 573 001e 01D1     		bne	.L24
 574              		.loc 1 425 3 is_stmt 0 discriminator 1
 575 0020 0223     		movs	r3, #2
 576 0022 4AE0     		b	.L25
 577              	.L24:
 578              		.loc 1 425 3 discriminator 2
 579 0024 FB68     		ldr	r3, [r7, #12]
 580 0026 7422     		movs	r2, #116
 581 0028 0121     		movs	r1, #1
 582 002a 9954     		strb	r1, [r3, r2]
 426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   huart->gState = HAL_UART_STATE_BUSY;
 583              		.loc 1 427 17 is_stmt 1 discriminator 2
 584 002c FB68     		ldr	r3, [r7, #12]
 585 002e 2422     		movs	r2, #36
 586 0030 9A67     		str	r2, [r3, #120]
 428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Disable the Peripheral */
 430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UART_DISABLE(huart);
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 26


 587              		.loc 1 430 3 discriminator 2
 588 0032 FB68     		ldr	r3, [r7, #12]
 589 0034 1B68     		ldr	r3, [r3]
 590 0036 1A68     		ldr	r2, [r3]
 591 0038 FB68     		ldr	r3, [r7, #12]
 592 003a 1B68     		ldr	r3, [r3]
 593 003c 0121     		movs	r1, #1
 594 003e 8A43     		bics	r2, r1
 595 0040 1A60     		str	r2, [r3]
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set the wake-up selection scheme */
 433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 596              		.loc 1 433 3 discriminator 2
 597 0042 FB68     		ldr	r3, [r7, #12]
 598 0044 1B68     		ldr	r3, [r3]
 599 0046 9B68     		ldr	r3, [r3, #8]
 600 0048 1E4A     		ldr	r2, .L29
 601 004a 1340     		ands	r3, r2
 602 004c 1900     		movs	r1, r3
 603 004e 3B1D     		adds	r3, r7, #4
 604 0050 1A68     		ldr	r2, [r3]
 605 0052 FB68     		ldr	r3, [r7, #12]
 606 0054 1B68     		ldr	r3, [r3]
 607 0056 0A43     		orrs	r2, r1
 608 0058 9A60     		str	r2, [r3, #8]
 434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 609              		.loc 1 435 22 discriminator 2
 610 005a 3B1D     		adds	r3, r7, #4
 611 005c 1B68     		ldr	r3, [r3]
 612              		.loc 1 435 6 discriminator 2
 613 005e 002B     		cmp	r3, #0
 614 0060 05D1     		bne	.L26
 436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 615              		.loc 1 437 5
 616 0062 3B1D     		adds	r3, r7, #4
 617 0064 F868     		ldr	r0, [r7, #12]
 618 0066 1968     		ldr	r1, [r3]
 619 0068 5A68     		ldr	r2, [r3, #4]
 620 006a FFF7FEFF 		bl	UARTEx_Wakeup_AddressConfig
 621              	.L26:
 438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Enable the Peripheral */
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UART_ENABLE(huart);
 622              		.loc 1 441 3
 623 006e FB68     		ldr	r3, [r7, #12]
 624 0070 1B68     		ldr	r3, [r3]
 625 0072 1A68     		ldr	r2, [r3]
 626 0074 FB68     		ldr	r3, [r7, #12]
 627 0076 1B68     		ldr	r3, [r3]
 628 0078 0121     		movs	r1, #1
 629 007a 0A43     		orrs	r2, r1
 630 007c 1A60     		str	r2, [r3]
 442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Init tickstart for timeout management */
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 27


 444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   tickstart = HAL_GetTick();
 631              		.loc 1 444 15
 632 007e FFF7FEFF 		bl	HAL_GetTick
 633 0082 0300     		movs	r3, r0
 634 0084 3B61     		str	r3, [r7, #16]
 445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Wait until REACK flag is set */
 447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE)
 635              		.loc 1 447 7
 636 0086 3B69     		ldr	r3, [r7, #16]
 637 0088 8022     		movs	r2, #128
 638 008a D103     		lsls	r1, r2, #15
 639 008c F868     		ldr	r0, [r7, #12]
 640 008e 0E4A     		ldr	r2, .L29+4
 641 0090 0092     		str	r2, [sp]
 642 0092 0022     		movs	r2, #0
 643 0094 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 644 0098 031E     		subs	r3, r0, #0
 645              		.loc 1 447 6
 646 009a 04D0     		beq	.L27
 448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     status = HAL_TIMEOUT;
 647              		.loc 1 449 12
 648 009c 1723     		movs	r3, #23
 649 009e FB18     		adds	r3, r7, r3
 650 00a0 0322     		movs	r2, #3
 651 00a2 1A70     		strb	r2, [r3]
 652 00a4 02E0     		b	.L28
 653              	.L27:
 450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   else
 452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Initialize the UART State */
 454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->gState = HAL_UART_STATE_READY;
 654              		.loc 1 454 19
 655 00a6 FB68     		ldr	r3, [r7, #12]
 656 00a8 2022     		movs	r2, #32
 657 00aa 9A67     		str	r2, [r3, #120]
 658              	.L28:
 455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Unlocked */
 458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 659              		.loc 1 458 3
 660 00ac FB68     		ldr	r3, [r7, #12]
 661 00ae 7422     		movs	r2, #116
 662 00b0 0021     		movs	r1, #0
 663 00b2 9954     		strb	r1, [r3, r2]
 459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   return status;
 664              		.loc 1 460 10
 665 00b4 1723     		movs	r3, #23
 666 00b6 FB18     		adds	r3, r7, r3
 667 00b8 1B78     		ldrb	r3, [r3]
 668              	.L25:
 461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 669              		.loc 1 461 1
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 28


 670 00ba 1800     		movs	r0, r3
 671 00bc BD46     		mov	sp, r7
 672 00be 06B0     		add	sp, sp, #24
 673              		@ sp needed
 674 00c0 80BD     		pop	{r7, pc}
 675              	.L30:
 676 00c2 C046     		.align	2
 677              	.L29:
 678 00c4 FFFFCFFF 		.word	-3145729
 679 00c8 FFFFFF01 		.word	33554431
 680              		.cfi_endproc
 681              	.LFE52:
 683              		.section	.text.HAL_UARTEx_EnableStopMode,"ax",%progbits
 684              		.align	1
 685              		.global	HAL_UARTEx_EnableStopMode
 686              		.syntax unified
 687              		.code	16
 688              		.thumb_func
 690              	HAL_UARTEx_EnableStopMode:
 691              	.LFB53:
 462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief Enable UART Stop Mode.
 465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
 466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart UART handle.
 467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
 470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 692              		.loc 1 470 1
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 24
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696 0000 80B5     		push	{r7, lr}
 697              	.LCFI18:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 0002 86B0     		sub	sp, sp, #24
 702              	.LCFI19:
 703              		.cfi_def_cfa_offset 32
 704 0004 00AF     		add	r7, sp, #0
 705              	.LCFI20:
 706              		.cfi_def_cfa_register 7
 707 0006 7860     		str	r0, [r7, #4]
 471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Locked */
 472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 708              		.loc 1 472 3
 709 0008 7B68     		ldr	r3, [r7, #4]
 710 000a 7422     		movs	r2, #116
 711 000c 9B5C     		ldrb	r3, [r3, r2]
 712 000e 012B     		cmp	r3, #1
 713 0010 01D1     		bne	.L32
 714              		.loc 1 472 3 is_stmt 0 discriminator 1
 715 0012 0223     		movs	r3, #2
 716 0014 21E0     		b	.L33
 717              	.L32:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 29


 718              		.loc 1 472 3 discriminator 2
 719 0016 7B68     		ldr	r3, [r7, #4]
 720 0018 7422     		movs	r2, #116
 721 001a 0121     		movs	r1, #1
 722 001c 9954     		strb	r1, [r3, r2]
 723              	.LBB58:
 724              	.LBB59:
 725              	.LBB60:
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 726              		.loc 2 386 3 is_stmt 1 discriminator 2
 727              		.syntax divided
 728              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 729 001e EFF31083 		MRS r3, primask
 730              	@ 0 "" 2
 731              		.thumb
 732              		.syntax unified
 733 0022 BB60     		str	r3, [r7, #8]
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734              		.loc 2 387 9 discriminator 2
 735 0024 BB68     		ldr	r3, [r7, #8]
 736              	.LBE60:
 737              	.LBE59:
 473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set UESM bit */
 475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 738              		.loc 1 475 3 discriminator 2
 739 0026 7B61     		str	r3, [r7, #20]
 740 0028 0123     		movs	r3, #1
 741 002a FB60     		str	r3, [r7, #12]
 742              	.LBB61:
 743              	.LBB62:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 744              		.loc 2 414 3 discriminator 2
 745 002c FB68     		ldr	r3, [r7, #12]
 746              		.syntax divided
 747              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 748 002e 83F31088 		MSR primask, r3
 749              	@ 0 "" 2
 750              		.loc 2 415 1 discriminator 2
 751              		.thumb
 752              		.syntax unified
 753 0032 C046     		nop
 754              	.LBE62:
 755              	.LBE61:
 756              		.loc 1 475 3 discriminator 2
 757 0034 7B68     		ldr	r3, [r7, #4]
 758 0036 1B68     		ldr	r3, [r3]
 759 0038 1A68     		ldr	r2, [r3]
 760 003a 7B68     		ldr	r3, [r7, #4]
 761 003c 1B68     		ldr	r3, [r3]
 762 003e 0221     		movs	r1, #2
 763 0040 0A43     		orrs	r2, r1
 764 0042 1A60     		str	r2, [r3]
 765 0044 7B69     		ldr	r3, [r7, #20]
 766 0046 3B61     		str	r3, [r7, #16]
 767              	.LBB63:
 768              	.LBB64:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 30


 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769              		.loc 2 414 3 discriminator 2
 770 0048 3B69     		ldr	r3, [r7, #16]
 771              		.syntax divided
 772              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 773 004a 83F31088 		MSR primask, r3
 774              	@ 0 "" 2
 775              		.loc 2 415 1 discriminator 2
 776              		.thumb
 777              		.syntax unified
 778 004e C046     		nop
 779              	.LBE64:
 780              	.LBE63:
 781              	.LBE58:
 476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Unlocked */
 478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 782              		.loc 1 478 3 discriminator 2
 783 0050 7B68     		ldr	r3, [r7, #4]
 784 0052 7422     		movs	r2, #116
 785 0054 0021     		movs	r1, #0
 786 0056 9954     		strb	r1, [r3, r2]
 479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   return HAL_OK;
 787              		.loc 1 480 10 discriminator 2
 788 0058 0023     		movs	r3, #0
 789              	.L33:
 481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 790              		.loc 1 481 1
 791 005a 1800     		movs	r0, r3
 792 005c BD46     		mov	sp, r7
 793 005e 06B0     		add	sp, sp, #24
 794              		@ sp needed
 795 0060 80BD     		pop	{r7, pc}
 796              		.cfi_endproc
 797              	.LFE53:
 799              		.section	.text.HAL_UARTEx_DisableStopMode,"ax",%progbits
 800              		.align	1
 801              		.global	HAL_UARTEx_DisableStopMode
 802              		.syntax unified
 803              		.code	16
 804              		.thumb_func
 806              	HAL_UARTEx_DisableStopMode:
 807              	.LFB54:
 482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief Disable UART Stop Mode.
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart UART handle.
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 808              		.loc 1 489 1
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 24
 811              		@ frame_needed = 1, uses_anonymous_args = 0
 812 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 31


 813              	.LCFI21:
 814              		.cfi_def_cfa_offset 8
 815              		.cfi_offset 7, -8
 816              		.cfi_offset 14, -4
 817 0002 86B0     		sub	sp, sp, #24
 818              	.LCFI22:
 819              		.cfi_def_cfa_offset 32
 820 0004 00AF     		add	r7, sp, #0
 821              	.LCFI23:
 822              		.cfi_def_cfa_register 7
 823 0006 7860     		str	r0, [r7, #4]
 490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Locked */
 491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_LOCK(huart);
 824              		.loc 1 491 3
 825 0008 7B68     		ldr	r3, [r7, #4]
 826 000a 7422     		movs	r2, #116
 827 000c 9B5C     		ldrb	r3, [r3, r2]
 828 000e 012B     		cmp	r3, #1
 829 0010 01D1     		bne	.L36
 830              		.loc 1 491 3 is_stmt 0 discriminator 1
 831 0012 0223     		movs	r3, #2
 832 0014 21E0     		b	.L37
 833              	.L36:
 834              		.loc 1 491 3 discriminator 2
 835 0016 7B68     		ldr	r3, [r7, #4]
 836 0018 7422     		movs	r2, #116
 837 001a 0121     		movs	r1, #1
 838 001c 9954     		strb	r1, [r3, r2]
 839              	.LBB65:
 840              	.LBB66:
 841              	.LBB67:
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 842              		.loc 2 386 3 is_stmt 1 discriminator 2
 843              		.syntax divided
 844              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 845 001e EFF31083 		MRS r3, primask
 846              	@ 0 "" 2
 847              		.thumb
 848              		.syntax unified
 849 0022 BB60     		str	r3, [r7, #8]
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850              		.loc 2 387 9 discriminator 2
 851 0024 BB68     		ldr	r3, [r7, #8]
 852              	.LBE67:
 853              	.LBE66:
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Clear UESM bit */
 494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 854              		.loc 1 494 3 discriminator 2
 855 0026 7B61     		str	r3, [r7, #20]
 856 0028 0123     		movs	r3, #1
 857 002a FB60     		str	r3, [r7, #12]
 858              	.LBB68:
 859              	.LBB69:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 860              		.loc 2 414 3 discriminator 2
 861 002c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 32


 862              		.syntax divided
 863              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 864 002e 83F31088 		MSR primask, r3
 865              	@ 0 "" 2
 866              		.loc 2 415 1 discriminator 2
 867              		.thumb
 868              		.syntax unified
 869 0032 C046     		nop
 870              	.LBE69:
 871              	.LBE68:
 872              		.loc 1 494 3 discriminator 2
 873 0034 7B68     		ldr	r3, [r7, #4]
 874 0036 1B68     		ldr	r3, [r3]
 875 0038 1A68     		ldr	r2, [r3]
 876 003a 7B68     		ldr	r3, [r7, #4]
 877 003c 1B68     		ldr	r3, [r3]
 878 003e 0221     		movs	r1, #2
 879 0040 8A43     		bics	r2, r1
 880 0042 1A60     		str	r2, [r3]
 881 0044 7B69     		ldr	r3, [r7, #20]
 882 0046 3B61     		str	r3, [r7, #16]
 883              	.LBB70:
 884              	.LBB71:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 885              		.loc 2 414 3 discriminator 2
 886 0048 3B69     		ldr	r3, [r7, #16]
 887              		.syntax divided
 888              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 889 004a 83F31088 		MSR primask, r3
 890              	@ 0 "" 2
 891              		.loc 2 415 1 discriminator 2
 892              		.thumb
 893              		.syntax unified
 894 004e C046     		nop
 895              	.LBE71:
 896              	.LBE70:
 897              	.LBE65:
 495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Process Unlocked */
 497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   __HAL_UNLOCK(huart);
 898              		.loc 1 497 3 discriminator 2
 899 0050 7B68     		ldr	r3, [r7, #4]
 900 0052 7422     		movs	r2, #116
 901 0054 0021     		movs	r1, #0
 902 0056 9954     		strb	r1, [r3, r2]
 498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   return HAL_OK;
 903              		.loc 1 499 10 discriminator 2
 904 0058 0023     		movs	r3, #0
 905              	.L37:
 500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 906              		.loc 1 500 1
 907 005a 1800     		movs	r0, r3
 908 005c BD46     		mov	sp, r7
 909 005e 06B0     		add	sp, sp, #24
 910              		@ sp needed
 911 0060 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 33


 912              		.cfi_endproc
 913              	.LFE54:
 915              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 916              		.align	1
 917              		.global	HAL_UARTEx_ReceiveToIdle
 918              		.syntax unified
 919              		.code	16
 920              		.thumb_func
 922              	HAL_UARTEx_ReceiveToIdle:
 923              	.LFB55:
 501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        is received or an IDLE event occurs.
 505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  HAL_OK is returned if reception is completed (expected number of data has been received)
 506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        or if reception is stopped after IDLE event (less than the expected number of data has b
 507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        In this case, RxLen output parameter indicates number of data available in reception buf
 508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *         (16 bits) (as received data will be handled using uint16_t pointer cast). Depending on 
 514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *         alignment for pData.
 516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart   UART handle.
 517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
 518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
 519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param RxLen   Number of data elements finally received
 520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *                (could be lower than Size, in case reception ends on IDLE event)
 521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
 522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
 525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****                                            uint32_t Timeout)
 526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 924              		.loc 1 526 1
 925              		.cfi_startproc
 926              		@ args = 4, pretend = 0, frame = 32
 927              		@ frame_needed = 1, uses_anonymous_args = 0
 928 0000 80B5     		push	{r7, lr}
 929              	.LCFI24:
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 7, -8
 932              		.cfi_offset 14, -4
 933 0002 88B0     		sub	sp, sp, #32
 934              	.LCFI25:
 935              		.cfi_def_cfa_offset 40
 936 0004 00AF     		add	r7, sp, #0
 937              	.LCFI26:
 938              		.cfi_def_cfa_register 7
 939 0006 F860     		str	r0, [r7, #12]
 940 0008 B960     		str	r1, [r7, #8]
 941 000a 3B60     		str	r3, [r7]
 942 000c BB1D     		adds	r3, r7, #6
 943 000e 1A80     		strh	r2, [r3]
 527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   uint8_t  *pdata8bits;
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 34


 528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   uint16_t *pdata16bits;
 529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   uint16_t uhMask;
 530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   uint32_t tickstart;
 531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 944              		.loc 1 533 12
 945 0010 FB68     		ldr	r3, [r7, #12]
 946 0012 DB6F     		ldr	r3, [r3, #124]
 947              		.loc 1 533 6
 948 0014 202B     		cmp	r3, #32
 949 0016 00D0     		beq	.LCB744
 950 0018 0EE1     		b	.L40	@long jump
 951              	.LCB744:
 534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 952              		.loc 1 535 8
 953 001a BB68     		ldr	r3, [r7, #8]
 954 001c 002B     		cmp	r3, #0
 955 001e 03D0     		beq	.L41
 956              		.loc 1 535 25 discriminator 1
 957 0020 BB1D     		adds	r3, r7, #6
 958 0022 1B88     		ldrh	r3, [r3]
 959 0024 002B     		cmp	r3, #0
 960 0026 01D1     		bne	.L42
 961              	.L41:
 536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       return  HAL_ERROR;
 962              		.loc 1 537 15
 963 0028 0123     		movs	r3, #1
 964 002a 06E1     		b	.L43
 965              	.L42:
 538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
 541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data to be received from RDR will be
 542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        handled through a uint16_t cast. */
 543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 966              		.loc 1 543 21
 967 002c FB68     		ldr	r3, [r7, #12]
 968 002e 9A68     		ldr	r2, [r3, #8]
 969              		.loc 1 543 8
 970 0030 8023     		movs	r3, #128
 971 0032 5B01     		lsls	r3, r3, #5
 972 0034 9A42     		cmp	r2, r3
 973 0036 09D1     		bne	.L44
 974              		.loc 1 543 71 discriminator 1
 975 0038 FB68     		ldr	r3, [r7, #12]
 976 003a 1B69     		ldr	r3, [r3, #16]
 977              		.loc 1 543 56 discriminator 1
 978 003c 002B     		cmp	r3, #0
 979 003e 05D1     		bne	.L44
 544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 980              		.loc 1 545 13
 981 0040 BB68     		ldr	r3, [r7, #8]
 982              		.loc 1 545 30
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 35


 983 0042 0122     		movs	r2, #1
 984 0044 1340     		ands	r3, r2
 985              		.loc 1 545 10
 986 0046 01D0     		beq	.L44
 546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         return  HAL_ERROR;
 987              		.loc 1 547 17
 988 0048 0123     		movs	r3, #1
 989 004a F6E0     		b	.L43
 990              	.L44:
 548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     __HAL_LOCK(huart);
 991              		.loc 1 551 5
 992 004c FB68     		ldr	r3, [r7, #12]
 993 004e 7422     		movs	r2, #116
 994 0050 9B5C     		ldrb	r3, [r3, r2]
 995 0052 012B     		cmp	r3, #1
 996 0054 01D1     		bne	.L45
 997              		.loc 1 551 5 is_stmt 0 discriminator 1
 998 0056 0223     		movs	r3, #2
 999 0058 EFE0     		b	.L43
 1000              	.L45:
 1001              		.loc 1 551 5 discriminator 2
 1002 005a FB68     		ldr	r3, [r7, #12]
 1003 005c 7422     		movs	r2, #116
 1004 005e 0121     		movs	r1, #1
 1005 0060 9954     		strb	r1, [r3, r2]
 552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1006              		.loc 1 553 22 is_stmt 1 discriminator 2
 1007 0062 FB68     		ldr	r3, [r7, #12]
 1008 0064 8022     		movs	r2, #128
 1009 0066 0021     		movs	r1, #0
 1010 0068 9950     		str	r1, [r3, r2]
 554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1011              		.loc 1 554 20 discriminator 2
 1012 006a FB68     		ldr	r3, [r7, #12]
 1013 006c 2222     		movs	r2, #34
 1014 006e DA67     		str	r2, [r3, #124]
 555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1015              		.loc 1 555 26 discriminator 2
 1016 0070 FB68     		ldr	r3, [r7, #12]
 1017 0072 0122     		movs	r2, #1
 1018 0074 1A66     		str	r2, [r3, #96]
 556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Init tickstart for timeout management */
 558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     tickstart = HAL_GetTick();
 1019              		.loc 1 558 17 discriminator 2
 1020 0076 FFF7FEFF 		bl	HAL_GetTick
 1021 007a 0300     		movs	r3, r0
 1022 007c 7B61     		str	r3, [r7, #20]
 559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->RxXferSize  = Size;
 1023              		.loc 1 560 24 discriminator 2
 1024 007e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 36


 1025 0080 BA1D     		adds	r2, r7, #6
 1026 0082 5821     		movs	r1, #88
 1027 0084 1288     		ldrh	r2, [r2]
 1028 0086 5A52     		strh	r2, [r3, r1]
 561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->RxXferCount = Size;
 1029              		.loc 1 561 24 discriminator 2
 1030 0088 FB68     		ldr	r3, [r7, #12]
 1031 008a BA1D     		adds	r2, r7, #6
 1032 008c 5A21     		movs	r1, #90
 1033 008e 1288     		ldrh	r2, [r2]
 1034 0090 5A52     		strh	r2, [r3, r1]
 562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Computation of UART mask to apply to RDR register */
 564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     UART_MASK_COMPUTATION(huart);
 1035              		.loc 1 564 5 discriminator 2
 1036 0092 FB68     		ldr	r3, [r7, #12]
 1037 0094 9A68     		ldr	r2, [r3, #8]
 1038 0096 8023     		movs	r3, #128
 1039 0098 5B01     		lsls	r3, r3, #5
 1040 009a 9A42     		cmp	r2, r3
 1041 009c 0DD1     		bne	.L46
 1042              		.loc 1 564 5 is_stmt 0 discriminator 1
 1043 009e FB68     		ldr	r3, [r7, #12]
 1044 00a0 1B69     		ldr	r3, [r3, #16]
 1045 00a2 002B     		cmp	r3, #0
 1046 00a4 04D1     		bne	.L47
 1047              		.loc 1 564 5 discriminator 3
 1048 00a6 FB68     		ldr	r3, [r7, #12]
 1049 00a8 5C22     		movs	r2, #92
 1050 00aa 6649     		ldr	r1, .L62
 1051 00ac 9952     		strh	r1, [r3, r2]
 1052 00ae 2EE0     		b	.L48
 1053              	.L47:
 1054              		.loc 1 564 5 discriminator 4
 1055 00b0 FB68     		ldr	r3, [r7, #12]
 1056 00b2 5C22     		movs	r2, #92
 1057 00b4 FF21     		movs	r1, #255
 1058 00b6 9952     		strh	r1, [r3, r2]
 1059 00b8 29E0     		b	.L48
 1060              	.L46:
 1061              		.loc 1 564 5 discriminator 2
 1062 00ba FB68     		ldr	r3, [r7, #12]
 1063 00bc 9B68     		ldr	r3, [r3, #8]
 1064 00be 002B     		cmp	r3, #0
 1065 00c0 0DD1     		bne	.L49
 1066              		.loc 1 564 5 discriminator 5
 1067 00c2 FB68     		ldr	r3, [r7, #12]
 1068 00c4 1B69     		ldr	r3, [r3, #16]
 1069 00c6 002B     		cmp	r3, #0
 1070 00c8 04D1     		bne	.L50
 1071              		.loc 1 564 5 discriminator 7
 1072 00ca FB68     		ldr	r3, [r7, #12]
 1073 00cc 5C22     		movs	r2, #92
 1074 00ce FF21     		movs	r1, #255
 1075 00d0 9952     		strh	r1, [r3, r2]
 1076 00d2 1CE0     		b	.L48
 1077              	.L50:
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 37


 1078              		.loc 1 564 5 discriminator 8
 1079 00d4 FB68     		ldr	r3, [r7, #12]
 1080 00d6 5C22     		movs	r2, #92
 1081 00d8 7F21     		movs	r1, #127
 1082 00da 9952     		strh	r1, [r3, r2]
 1083 00dc 17E0     		b	.L48
 1084              	.L49:
 1085              		.loc 1 564 5 discriminator 6
 1086 00de FB68     		ldr	r3, [r7, #12]
 1087 00e0 9A68     		ldr	r2, [r3, #8]
 1088 00e2 8023     		movs	r3, #128
 1089 00e4 5B05     		lsls	r3, r3, #21
 1090 00e6 9A42     		cmp	r2, r3
 1091 00e8 0DD1     		bne	.L51
 1092              		.loc 1 564 5 discriminator 9
 1093 00ea FB68     		ldr	r3, [r7, #12]
 1094 00ec 1B69     		ldr	r3, [r3, #16]
 1095 00ee 002B     		cmp	r3, #0
 1096 00f0 04D1     		bne	.L52
 1097              		.loc 1 564 5 discriminator 11
 1098 00f2 FB68     		ldr	r3, [r7, #12]
 1099 00f4 5C22     		movs	r2, #92
 1100 00f6 7F21     		movs	r1, #127
 1101 00f8 9952     		strh	r1, [r3, r2]
 1102 00fa 08E0     		b	.L48
 1103              	.L52:
 1104              		.loc 1 564 5 discriminator 12
 1105 00fc FB68     		ldr	r3, [r7, #12]
 1106 00fe 5C22     		movs	r2, #92
 1107 0100 3F21     		movs	r1, #63
 1108 0102 9952     		strh	r1, [r3, r2]
 1109 0104 03E0     		b	.L48
 1110              	.L51:
 1111              		.loc 1 564 5 discriminator 10
 1112 0106 FB68     		ldr	r3, [r7, #12]
 1113 0108 5C22     		movs	r2, #92
 1114 010a 0021     		movs	r1, #0
 1115 010c 9952     		strh	r1, [r3, r2]
 1116              	.L48:
 565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     uhMask = huart->Mask;
 1117              		.loc 1 565 12 is_stmt 1
 1118 010e 1223     		movs	r3, #18
 1119 0110 FB18     		adds	r3, r7, r3
 1120 0112 FA68     		ldr	r2, [r7, #12]
 1121 0114 5C21     		movs	r1, #92
 1122 0116 525A     		ldrh	r2, [r2, r1]
 1123 0118 1A80     		strh	r2, [r3]
 566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
 568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1124              		.loc 1 568 21
 1125 011a FB68     		ldr	r3, [r7, #12]
 1126 011c 9A68     		ldr	r2, [r3, #8]
 1127              		.loc 1 568 8
 1128 011e 8023     		movs	r3, #128
 1129 0120 5B01     		lsls	r3, r3, #5
 1130 0122 9A42     		cmp	r2, r3
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 38


 1131 0124 08D1     		bne	.L53
 1132              		.loc 1 568 71 discriminator 1
 1133 0126 FB68     		ldr	r3, [r7, #12]
 1134 0128 1B69     		ldr	r3, [r3, #16]
 1135              		.loc 1 568 56 discriminator 1
 1136 012a 002B     		cmp	r3, #0
 1137 012c 04D1     		bne	.L53
 569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       pdata8bits  = NULL;
 1138              		.loc 1 570 19
 1139 012e 0023     		movs	r3, #0
 1140 0130 FB61     		str	r3, [r7, #28]
 571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       pdata16bits = (uint16_t *) pData;
 1141              		.loc 1 571 19
 1142 0132 BB68     		ldr	r3, [r7, #8]
 1143 0134 BB61     		str	r3, [r7, #24]
 1144 0136 03E0     		b	.L54
 1145              	.L53:
 572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     else
 574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       pdata8bits  = pData;
 1146              		.loc 1 575 19
 1147 0138 BB68     		ldr	r3, [r7, #8]
 1148 013a FB61     		str	r3, [r7, #28]
 576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       pdata16bits = NULL;
 1149              		.loc 1 576 19
 1150 013c 0023     		movs	r3, #0
 1151 013e BB61     		str	r3, [r7, #24]
 1152              	.L54:
 577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     __HAL_UNLOCK(huart);
 1153              		.loc 1 579 5
 1154 0140 FB68     		ldr	r3, [r7, #12]
 1155 0142 7422     		movs	r2, #116
 1156 0144 0021     		movs	r1, #0
 1157 0146 9954     		strb	r1, [r3, r2]
 580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Initialize output number of received elements */
 582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     *RxLen = 0U;
 1158              		.loc 1 582 12
 1159 0148 3B68     		ldr	r3, [r7]
 1160 014a 0022     		movs	r2, #0
 1161 014c 1A80     		strh	r2, [r3]
 583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* as long as data have to be received */
 585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     while (huart->RxXferCount > 0U)
 1162              		.loc 1 585 11
 1163 014e 5DE0     		b	.L55
 1164              	.L61:
 586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       /* Check if IDLE flag is set */
 588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 1165              		.loc 1 588 11
 1166 0150 FB68     		ldr	r3, [r7, #12]
 1167 0152 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 39


 1168 0154 DB69     		ldr	r3, [r3, #28]
 1169 0156 1022     		movs	r2, #16
 1170 0158 1340     		ands	r3, r2
 1171              		.loc 1 588 10
 1172 015a 102B     		cmp	r3, #16
 1173 015c 0CD1     		bne	.L56
 589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         /* Clear IDLE flag in ISR */
 591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 1174              		.loc 1 591 9
 1175 015e FB68     		ldr	r3, [r7, #12]
 1176 0160 1B68     		ldr	r3, [r3]
 1177 0162 1022     		movs	r2, #16
 1178 0164 1A62     		str	r2, [r3, #32]
 592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
 594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
 595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         if (*RxLen > 0U)
 1179              		.loc 1 595 13
 1180 0166 3B68     		ldr	r3, [r7]
 1181 0168 1B88     		ldrh	r3, [r3]
 1182              		.loc 1 595 12
 1183 016a 002B     		cmp	r3, #0
 1184 016c 04D0     		beq	.L56
 596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         {
 597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 1185              		.loc 1 597 26
 1186 016e FB68     		ldr	r3, [r7, #12]
 1187 0170 2022     		movs	r2, #32
 1188 0172 DA67     		str	r2, [r3, #124]
 598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           return HAL_OK;
 1189              		.loc 1 599 18
 1190 0174 0023     		movs	r3, #0
 1191 0176 60E0     		b	.L43
 1192              	.L56:
 600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         }
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       /* Check if RXNE flag is set */
 604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 1193              		.loc 1 604 11
 1194 0178 FB68     		ldr	r3, [r7, #12]
 1195 017a 1B68     		ldr	r3, [r3]
 1196 017c DB69     		ldr	r3, [r3, #28]
 1197 017e 2022     		movs	r2, #32
 1198 0180 1340     		ands	r3, r2
 1199              		.loc 1 604 10
 1200 0182 202B     		cmp	r3, #32
 1201 0184 2FD1     		bne	.L57
 605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         if (pdata8bits == NULL)
 1202              		.loc 1 606 12
 1203 0186 FB69     		ldr	r3, [r7, #28]
 1204 0188 002B     		cmp	r3, #0
 1205 018a 0ED1     		bne	.L58
 607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         {
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 40


 608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 1206              		.loc 1 608 42
 1207 018c FB68     		ldr	r3, [r7, #12]
 1208 018e 1B68     		ldr	r3, [r3]
 1209              		.loc 1 608 52
 1210 0190 5B6A     		ldr	r3, [r3, #36]
 1211              		.loc 1 608 26
 1212 0192 9BB2     		uxth	r3, r3
 1213 0194 1222     		movs	r2, #18
 1214 0196 BA18     		adds	r2, r7, r2
 1215 0198 1288     		ldrh	r2, [r2]
 1216 019a 1340     		ands	r3, r2
 1217 019c 9AB2     		uxth	r2, r3
 1218              		.loc 1 608 24
 1219 019e BB69     		ldr	r3, [r7, #24]
 1220 01a0 1A80     		strh	r2, [r3]
 609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           pdata16bits++;
 1221              		.loc 1 609 22
 1222 01a2 BB69     		ldr	r3, [r7, #24]
 1223 01a4 0233     		adds	r3, r3, #2
 1224 01a6 BB61     		str	r3, [r7, #24]
 1225 01a8 0EE0     		b	.L59
 1226              	.L58:
 610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         }
 611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         else
 612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         {
 613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 1227              		.loc 1 613 40
 1228 01aa FB68     		ldr	r3, [r7, #12]
 1229 01ac 1B68     		ldr	r3, [r3]
 1230              		.loc 1 613 50
 1231 01ae 5B6A     		ldr	r3, [r3, #36]
 1232              		.loc 1 613 25
 1233 01b0 DBB2     		uxtb	r3, r3
 1234              		.loc 1 613 58
 1235 01b2 1222     		movs	r2, #18
 1236 01b4 BA18     		adds	r2, r7, r2
 1237 01b6 1288     		ldrh	r2, [r2]
 1238 01b8 D2B2     		uxtb	r2, r2
 1239              		.loc 1 613 25
 1240 01ba 1340     		ands	r3, r2
 1241 01bc DAB2     		uxtb	r2, r3
 1242              		.loc 1 613 23
 1243 01be FB69     		ldr	r3, [r7, #28]
 1244 01c0 1A70     		strb	r2, [r3]
 614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           pdata8bits++;
 1245              		.loc 1 614 21
 1246 01c2 FB69     		ldr	r3, [r7, #28]
 1247 01c4 0133     		adds	r3, r3, #1
 1248 01c6 FB61     		str	r3, [r7, #28]
 1249              	.L59:
 615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         }
 616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         /* Increment number of received elements */
 617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         *RxLen += 1U;
 1250              		.loc 1 617 16
 1251 01c8 3B68     		ldr	r3, [r7]
 1252 01ca 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 41


 1253 01cc 0133     		adds	r3, r3, #1
 1254 01ce 9AB2     		uxth	r2, r3
 1255 01d0 3B68     		ldr	r3, [r7]
 1256 01d2 1A80     		strh	r2, [r3]
 618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         huart->RxXferCount--;
 1257              		.loc 1 618 14
 1258 01d4 FB68     		ldr	r3, [r7, #12]
 1259 01d6 5A22     		movs	r2, #90
 1260 01d8 9B5A     		ldrh	r3, [r3, r2]
 1261 01da 9BB2     		uxth	r3, r3
 1262              		.loc 1 618 27
 1263 01dc 013B     		subs	r3, r3, #1
 1264 01de 99B2     		uxth	r1, r3
 1265 01e0 FB68     		ldr	r3, [r7, #12]
 1266 01e2 5A22     		movs	r2, #90
 1267 01e4 9952     		strh	r1, [r3, r2]
 1268              	.L57:
 619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       /* Check for the Timeout */
 622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       if (Timeout != HAL_MAX_DELAY)
 1269              		.loc 1 622 10
 1270 01e6 BB6A     		ldr	r3, [r7, #40]
 1271 01e8 0133     		adds	r3, r3, #1
 1272 01ea 0FD0     		beq	.L55
 623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 1273              		.loc 1 624 15
 1274 01ec FFF7FEFF 		bl	HAL_GetTick
 1275 01f0 0200     		movs	r2, r0
 1276              		.loc 1 624 29
 1277 01f2 7B69     		ldr	r3, [r7, #20]
 1278 01f4 D31A     		subs	r3, r2, r3
 1279              		.loc 1 624 12
 1280 01f6 BA6A     		ldr	r2, [r7, #40]
 1281 01f8 9A42     		cmp	r2, r3
 1282 01fa 02D3     		bcc	.L60
 1283              		.loc 1 624 53 discriminator 1
 1284 01fc BB6A     		ldr	r3, [r7, #40]
 1285 01fe 002B     		cmp	r3, #0
 1286 0200 04D1     		bne	.L55
 1287              	.L60:
 625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         {
 626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           huart->RxState = HAL_UART_STATE_READY;
 1288              		.loc 1 626 26
 1289 0202 FB68     		ldr	r3, [r7, #12]
 1290 0204 2022     		movs	r2, #32
 1291 0206 DA67     		str	r2, [r3, #124]
 627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****           return HAL_TIMEOUT;
 1292              		.loc 1 628 18
 1293 0208 0323     		movs	r3, #3
 1294 020a 16E0     		b	.L43
 1295              	.L55:
 585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 1296              		.loc 1 585 17
 1297 020c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 42


 1298 020e 5A22     		movs	r2, #90
 1299 0210 9B5A     		ldrh	r3, [r3, r2]
 1300 0212 9BB2     		uxth	r3, r3
 585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 1301              		.loc 1 585 11
 1302 0214 002B     		cmp	r3, #0
 1303 0216 9BD1     		bne	.L61
 629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         }
 630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Set number of received elements in output parameter : RxLen */
 634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 1304              		.loc 1 634 19
 1305 0218 FB68     		ldr	r3, [r7, #12]
 1306 021a 5822     		movs	r2, #88
 1307 021c 9A5A     		ldrh	r2, [r3, r2]
 1308              		.loc 1 634 39
 1309 021e FB68     		ldr	r3, [r7, #12]
 1310 0220 5A21     		movs	r1, #90
 1311 0222 5B5A     		ldrh	r3, [r3, r1]
 1312 0224 9BB2     		uxth	r3, r3
 1313              		.loc 1 634 32
 1314 0226 D31A     		subs	r3, r2, r3
 1315 0228 9AB2     		uxth	r2, r3
 1316              		.loc 1 634 12
 1317 022a 3B68     		ldr	r3, [r7]
 1318 022c 1A80     		strh	r2, [r3]
 635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->RxState = HAL_UART_STATE_READY;
 1319              		.loc 1 636 20
 1320 022e FB68     		ldr	r3, [r7, #12]
 1321 0230 2022     		movs	r2, #32
 1322 0232 DA67     		str	r2, [r3, #124]
 637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return HAL_OK;
 1323              		.loc 1 638 12
 1324 0234 0023     		movs	r3, #0
 1325 0236 00E0     		b	.L43
 1326              	.L40:
 639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   else
 641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return HAL_BUSY;
 1327              		.loc 1 642 12
 1328 0238 0223     		movs	r3, #2
 1329              	.L43:
 643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 1330              		.loc 1 644 1
 1331 023a 1800     		movs	r0, r3
 1332 023c BD46     		mov	sp, r7
 1333 023e 08B0     		add	sp, sp, #32
 1334              		@ sp needed
 1335 0240 80BD     		pop	{r7, pc}
 1336              	.L63:
 1337 0242 C046     		.align	2
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 43


 1338              	.L62:
 1339 0244 FF010000 		.word	511
 1340              		.cfi_endproc
 1341              	.LFE55:
 1343              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 1344              		.align	1
 1345              		.global	HAL_UARTEx_ReceiveToIdle_IT
 1346              		.syntax unified
 1347              		.code	16
 1348              		.thumb_func
 1350              	HAL_UARTEx_ReceiveToIdle_IT:
 1351              	.LFB56:
 645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data
 648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        is received or an IDLE event occurs.
 649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  Reception is initiated by this function call. Further progress of reception is achieved 
 650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        to UART interrupts raised by RXNE and IDLE events. Callback is called at end of receptio
 651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        number of received data elements.
 652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        address of user data buffer for storing data to be received, should be aligned on a half
 657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        (16 bits) (as received data will be handled using uint16_t pointer cast). Depending on c
 658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        use of specific alignment compilation directives or pragmas might be required
 659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        to ensure proper alignment for pData.
 660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart UART handle.
 661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
 666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 1352              		.loc 1 666 1
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 40
 1355              		@ frame_needed = 1, uses_anonymous_args = 0
 1356 0000 B0B5     		push	{r4, r5, r7, lr}
 1357              	.LCFI27:
 1358              		.cfi_def_cfa_offset 16
 1359              		.cfi_offset 4, -16
 1360              		.cfi_offset 5, -12
 1361              		.cfi_offset 7, -8
 1362              		.cfi_offset 14, -4
 1363 0002 8AB0     		sub	sp, sp, #40
 1364              	.LCFI28:
 1365              		.cfi_def_cfa_offset 56
 1366 0004 00AF     		add	r7, sp, #0
 1367              	.LCFI29:
 1368              		.cfi_def_cfa_register 7
 1369 0006 F860     		str	r0, [r7, #12]
 1370 0008 B960     		str	r1, [r7, #8]
 1371 000a BB1D     		adds	r3, r7, #6
 1372 000c 1A80     		strh	r2, [r3]
 667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 44


 669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1373              		.loc 1 670 12
 1374 000e FB68     		ldr	r3, [r7, #12]
 1375 0010 DB6F     		ldr	r3, [r3, #124]
 1376              		.loc 1 670 6
 1377 0012 202B     		cmp	r3, #32
 1378 0014 5ED1     		bne	.L65
 671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 1379              		.loc 1 672 8
 1380 0016 BB68     		ldr	r3, [r7, #8]
 1381 0018 002B     		cmp	r3, #0
 1382 001a 03D0     		beq	.L66
 1383              		.loc 1 672 25 discriminator 1
 1384 001c BB1D     		adds	r3, r7, #6
 1385 001e 1B88     		ldrh	r3, [r3]
 1386 0020 002B     		cmp	r3, #0
 1387 0022 01D1     		bne	.L67
 1388              	.L66:
 673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       return HAL_ERROR;
 1389              		.loc 1 674 14
 1390 0024 0123     		movs	r3, #1
 1391 0026 56E0     		b	.L68
 1392              	.L67:
 675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
 678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data to be received from RDR will be
 679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        handled through a uint16_t cast. */
 680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1393              		.loc 1 680 21
 1394 0028 FB68     		ldr	r3, [r7, #12]
 1395 002a 9A68     		ldr	r2, [r3, #8]
 1396              		.loc 1 680 8
 1397 002c 8023     		movs	r3, #128
 1398 002e 5B01     		lsls	r3, r3, #5
 1399 0030 9A42     		cmp	r2, r3
 1400 0032 09D1     		bne	.L69
 1401              		.loc 1 680 71 discriminator 1
 1402 0034 FB68     		ldr	r3, [r7, #12]
 1403 0036 1B69     		ldr	r3, [r3, #16]
 1404              		.loc 1 680 56 discriminator 1
 1405 0038 002B     		cmp	r3, #0
 1406 003a 05D1     		bne	.L69
 681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1407              		.loc 1 682 13
 1408 003c BB68     		ldr	r3, [r7, #8]
 1409              		.loc 1 682 30
 1410 003e 0122     		movs	r2, #1
 1411 0040 1340     		ands	r3, r2
 1412              		.loc 1 682 10
 1413 0042 01D0     		beq	.L69
 683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         return  HAL_ERROR;
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 45


 1414              		.loc 1 684 17
 1415 0044 0123     		movs	r3, #1
 1416 0046 46E0     		b	.L68
 1417              	.L69:
 685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     __HAL_LOCK(huart);
 1418              		.loc 1 688 5
 1419 0048 FB68     		ldr	r3, [r7, #12]
 1420 004a 7422     		movs	r2, #116
 1421 004c 9B5C     		ldrb	r3, [r3, r2]
 1422 004e 012B     		cmp	r3, #1
 1423 0050 01D1     		bne	.L70
 1424              		.loc 1 688 5 is_stmt 0 discriminator 1
 1425 0052 0223     		movs	r3, #2
 1426 0054 3FE0     		b	.L68
 1427              	.L70:
 1428              		.loc 1 688 5 discriminator 2
 1429 0056 FB68     		ldr	r3, [r7, #12]
 1430 0058 7422     		movs	r2, #116
 1431 005a 0121     		movs	r1, #1
 1432 005c 9954     		strb	r1, [r3, r2]
 689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1433              		.loc 1 691 26 is_stmt 1 discriminator 2
 1434 005e FB68     		ldr	r3, [r7, #12]
 1435 0060 0122     		movs	r2, #1
 1436 0062 1A66     		str	r2, [r3, #96]
 692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 1437              		.loc 1 693 15 discriminator 2
 1438 0064 2725     		movs	r5, #39
 1439 0066 7C19     		adds	r4, r7, r5
 1440 0068 BB1D     		adds	r3, r7, #6
 1441 006a 1A88     		ldrh	r2, [r3]
 1442 006c B968     		ldr	r1, [r7, #8]
 1443 006e FB68     		ldr	r3, [r7, #12]
 1444 0070 1800     		movs	r0, r3
 1445 0072 FFF7FEFF 		bl	UART_Start_Receive_IT
 1446 0076 0300     		movs	r3, r0
 1447 0078 2370     		strb	r3, [r4]
 694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if (status == HAL_OK)
 1448              		.loc 1 696 8 discriminator 2
 1449 007a 7B19     		adds	r3, r7, r5
 1450 007c 1B78     		ldrb	r3, [r3]
 1451 007e 002B     		cmp	r3, #0
 1452 0080 24D1     		bne	.L71
 697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 1453              		.loc 1 698 16
 1454 0082 FB68     		ldr	r3, [r7, #12]
 1455 0084 1B6E     		ldr	r3, [r3, #96]
 1456              		.loc 1 698 10
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 46


 1457 0086 012B     		cmp	r3, #1
 1458 0088 1CD1     		bne	.L72
 699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 1459              		.loc 1 700 9
 1460 008a FB68     		ldr	r3, [r7, #12]
 1461 008c 1B68     		ldr	r3, [r3]
 1462 008e 1022     		movs	r2, #16
 1463 0090 1A62     		str	r2, [r3, #32]
 1464              	.LBB72:
 1465              	.LBB73:
 1466              	.LBB74:
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1467              		.loc 2 386 3
 1468              		.syntax divided
 1469              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1470 0092 EFF31083 		MRS r3, primask
 1471              	@ 0 "" 2
 1472              		.thumb
 1473              		.syntax unified
 1474 0096 7B61     		str	r3, [r7, #20]
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1475              		.loc 2 387 9
 1476 0098 7B69     		ldr	r3, [r7, #20]
 1477              	.LBE74:
 1478              	.LBE73:
 701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1479              		.loc 1 701 9
 1480 009a 3B62     		str	r3, [r7, #32]
 1481 009c 0123     		movs	r3, #1
 1482 009e BB61     		str	r3, [r7, #24]
 1483              	.LBB75:
 1484              	.LBB76:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1485              		.loc 2 414 3
 1486 00a0 BB69     		ldr	r3, [r7, #24]
 1487              		.syntax divided
 1488              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1489 00a2 83F31088 		MSR primask, r3
 1490              	@ 0 "" 2
 1491              		.loc 2 415 1
 1492              		.thumb
 1493              		.syntax unified
 1494 00a6 C046     		nop
 1495              	.LBE76:
 1496              	.LBE75:
 1497              		.loc 1 701 9
 1498 00a8 FB68     		ldr	r3, [r7, #12]
 1499 00aa 1B68     		ldr	r3, [r3]
 1500 00ac 1A68     		ldr	r2, [r3]
 1501 00ae FB68     		ldr	r3, [r7, #12]
 1502 00b0 1B68     		ldr	r3, [r3]
 1503 00b2 1021     		movs	r1, #16
 1504 00b4 0A43     		orrs	r2, r1
 1505 00b6 1A60     		str	r2, [r3]
 1506 00b8 3B6A     		ldr	r3, [r7, #32]
 1507 00ba FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 47


 1508              	.LBB77:
 1509              	.LBB78:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1510              		.loc 2 414 3
 1511 00bc FB69     		ldr	r3, [r7, #28]
 1512              		.syntax divided
 1513              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1514 00be 83F31088 		MSR primask, r3
 1515              	@ 0 "" 2
 1516              		.loc 2 415 1
 1517              		.thumb
 1518              		.syntax unified
 1519 00c2 03E0     		b	.L71
 1520              	.L72:
 1521              	.LBE78:
 1522              	.LBE77:
 1523              	.LBE72:
 702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       else
 704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            (Overrun error for instance).
 708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         status = HAL_ERROR;
 1524              		.loc 1 709 16
 1525 00c4 2723     		movs	r3, #39
 1526 00c6 FB18     		adds	r3, r7, r3
 1527 00c8 0122     		movs	r2, #1
 1528 00ca 1A70     		strb	r2, [r3]
 1529              	.L71:
 710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return status;
 1530              		.loc 1 713 12
 1531 00cc 2723     		movs	r3, #39
 1532 00ce FB18     		adds	r3, r7, r3
 1533 00d0 1B78     		ldrb	r3, [r3]
 1534 00d2 00E0     		b	.L68
 1535              	.L65:
 714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   else
 716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return HAL_BUSY;
 1536              		.loc 1 717 12
 1537 00d4 0223     		movs	r3, #2
 1538              	.L68:
 718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 1539              		.loc 1 719 1
 1540 00d6 1800     		movs	r0, r3
 1541 00d8 BD46     		mov	sp, r7
 1542 00da 0AB0     		add	sp, sp, #40
 1543              		@ sp needed
 1544 00dc B0BD     		pop	{r4, r5, r7, pc}
 1545              		.cfi_endproc
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 48


 1546              	.LFE56:
 1548              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 1549              		.align	1
 1550              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 1551              		.syntax unified
 1552              		.code	16
 1553              		.thumb_func
 1555              	HAL_UARTEx_ReceiveToIdle_DMA:
 1556              	.LFB57:
 720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief Receive an amount of data in DMA mode till either the expected number
 723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        of data is received or an IDLE event occurs.
 724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  Reception is initiated by this function call. Further progress of reception is achieved 
 725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        to DMA services, transferring automatically received data elements in user reception buf
 726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        calling registered callbacks at half/end of reception. UART IDLE events are also used to
 727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        reception phase as ended. In all cases, callback execution will indicate number of recei
 728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  When the UART parity is enabled (PCE = 1), the received data contain
 729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        the parity bit (MSB position).
 730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        the received data is handled as a set of uint16_t. In this case, Size must indicate the 
 732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        of uint16_t available through pData.
 733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        address of user data buffer for storing data to be received, should be aligned on a half
 735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        (16 bits) (as received data will be handled by DMA from halfword frontier). Depending on
 736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        use of specific alignment compilation directives or pragmas might be required
 737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   *        to ensure proper alignment for pData.
 738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart UART handle.
 739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
 740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
 741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval HAL status
 742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
 744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 1557              		.loc 1 744 1
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 40
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561 0000 B0B5     		push	{r4, r5, r7, lr}
 1562              	.LCFI30:
 1563              		.cfi_def_cfa_offset 16
 1564              		.cfi_offset 4, -16
 1565              		.cfi_offset 5, -12
 1566              		.cfi_offset 7, -8
 1567              		.cfi_offset 14, -4
 1568 0002 8AB0     		sub	sp, sp, #40
 1569              	.LCFI31:
 1570              		.cfi_def_cfa_offset 56
 1571 0004 00AF     		add	r7, sp, #0
 1572              	.LCFI32:
 1573              		.cfi_def_cfa_register 7
 1574 0006 F860     		str	r0, [r7, #12]
 1575 0008 B960     		str	r1, [r7, #8]
 1576 000a BB1D     		adds	r3, r7, #6
 1577 000c 1A80     		strh	r2, [r3]
 745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   HAL_StatusTypeDef status;
 746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 49


 747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Check that a Rx process is not already ongoing */
 748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1578              		.loc 1 748 12
 1579 000e FB68     		ldr	r3, [r7, #12]
 1580 0010 DB6F     		ldr	r3, [r3, #124]
 1581              		.loc 1 748 6
 1582 0012 202B     		cmp	r3, #32
 1583 0014 5ED1     		bne	.L75
 749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if ((pData == NULL) || (Size == 0U))
 1584              		.loc 1 750 8
 1585 0016 BB68     		ldr	r3, [r7, #8]
 1586 0018 002B     		cmp	r3, #0
 1587 001a 03D0     		beq	.L76
 1588              		.loc 1 750 25 discriminator 1
 1589 001c BB1D     		adds	r3, r7, #6
 1590 001e 1B88     		ldrh	r3, [r3]
 1591 0020 002B     		cmp	r3, #0
 1592 0022 01D1     		bne	.L77
 1593              	.L76:
 751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       return HAL_ERROR;
 1594              		.loc 1 752 14
 1595 0024 0123     		movs	r3, #1
 1596 0026 56E0     		b	.L78
 1597              	.L77:
 753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
 756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        should be aligned on a uint16_t frontier, as data copy from RDR will be
 757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****        handled by DMA from a uint16_t frontier. */
 758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1598              		.loc 1 758 21
 1599 0028 FB68     		ldr	r3, [r7, #12]
 1600 002a 9A68     		ldr	r2, [r3, #8]
 1601              		.loc 1 758 8
 1602 002c 8023     		movs	r3, #128
 1603 002e 5B01     		lsls	r3, r3, #5
 1604 0030 9A42     		cmp	r2, r3
 1605 0032 09D1     		bne	.L79
 1606              		.loc 1 758 71 discriminator 1
 1607 0034 FB68     		ldr	r3, [r7, #12]
 1608 0036 1B69     		ldr	r3, [r3, #16]
 1609              		.loc 1 758 56 discriminator 1
 1610 0038 002B     		cmp	r3, #0
 1611 003a 05D1     		bne	.L79
 759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1612              		.loc 1 760 13
 1613 003c BB68     		ldr	r3, [r7, #8]
 1614              		.loc 1 760 30
 1615 003e 0122     		movs	r2, #1
 1616 0040 1340     		ands	r3, r2
 1617              		.loc 1 760 10
 1618 0042 01D0     		beq	.L79
 761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         return  HAL_ERROR;
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 50


 1619              		.loc 1 762 17
 1620 0044 0123     		movs	r3, #1
 1621 0046 46E0     		b	.L78
 1622              	.L79:
 763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     __HAL_LOCK(huart);
 1623              		.loc 1 766 5
 1624 0048 FB68     		ldr	r3, [r7, #12]
 1625 004a 7422     		movs	r2, #116
 1626 004c 9B5C     		ldrb	r3, [r3, r2]
 1627 004e 012B     		cmp	r3, #1
 1628 0050 01D1     		bne	.L80
 1629              		.loc 1 766 5 is_stmt 0 discriminator 1
 1630 0052 0223     		movs	r3, #2
 1631 0054 3FE0     		b	.L78
 1632              	.L80:
 1633              		.loc 1 766 5 discriminator 2
 1634 0056 FB68     		ldr	r3, [r7, #12]
 1635 0058 7422     		movs	r2, #116
 1636 005a 0121     		movs	r1, #1
 1637 005c 9954     		strb	r1, [r3, r2]
 767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Set Reception type to reception till IDLE Event*/
 769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 1638              		.loc 1 769 26 is_stmt 1 discriminator 2
 1639 005e FB68     		ldr	r3, [r7, #12]
 1640 0060 0122     		movs	r2, #1
 1641 0062 1A66     		str	r2, [r3, #96]
 770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 1642              		.loc 1 771 15 discriminator 2
 1643 0064 2725     		movs	r5, #39
 1644 0066 7C19     		adds	r4, r7, r5
 1645 0068 BB1D     		adds	r3, r7, #6
 1646 006a 1A88     		ldrh	r2, [r3]
 1647 006c B968     		ldr	r1, [r7, #8]
 1648 006e FB68     		ldr	r3, [r7, #12]
 1649 0070 1800     		movs	r0, r3
 1650 0072 FFF7FEFF 		bl	UART_Start_Receive_DMA
 1651 0076 0300     		movs	r3, r0
 1652 0078 2370     		strb	r3, [r4]
 772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     /* Check Rx process has been successfully started */
 774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     if (status == HAL_OK)
 1653              		.loc 1 774 8 discriminator 2
 1654 007a 7B19     		adds	r3, r7, r5
 1655 007c 1B78     		ldrb	r3, [r3]
 1656 007e 002B     		cmp	r3, #0
 1657 0080 24D1     		bne	.L81
 775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     {
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 1658              		.loc 1 776 16
 1659 0082 FB68     		ldr	r3, [r7, #12]
 1660 0084 1B6E     		ldr	r3, [r3, #96]
 1661              		.loc 1 776 10
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 51


 1662 0086 012B     		cmp	r3, #1
 1663 0088 1CD1     		bne	.L82
 777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 1664              		.loc 1 778 9
 1665 008a FB68     		ldr	r3, [r7, #12]
 1666 008c 1B68     		ldr	r3, [r3]
 1667 008e 1022     		movs	r2, #16
 1668 0090 1A62     		str	r2, [r3, #32]
 1669              	.LBB79:
 1670              	.LBB80:
 1671              	.LBB81:
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1672              		.loc 2 386 3
 1673              		.syntax divided
 1674              	@ 386 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1675 0092 EFF31083 		MRS r3, primask
 1676              	@ 0 "" 2
 1677              		.thumb
 1678              		.syntax unified
 1679 0096 7B61     		str	r3, [r7, #20]
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1680              		.loc 2 387 9
 1681 0098 7B69     		ldr	r3, [r7, #20]
 1682              	.LBE81:
 1683              	.LBE80:
 779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 1684              		.loc 1 779 9
 1685 009a 3B62     		str	r3, [r7, #32]
 1686 009c 0123     		movs	r3, #1
 1687 009e BB61     		str	r3, [r7, #24]
 1688              	.LBB82:
 1689              	.LBB83:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1690              		.loc 2 414 3
 1691 00a0 BB69     		ldr	r3, [r7, #24]
 1692              		.syntax divided
 1693              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1694 00a2 83F31088 		MSR primask, r3
 1695              	@ 0 "" 2
 1696              		.loc 2 415 1
 1697              		.thumb
 1698              		.syntax unified
 1699 00a6 C046     		nop
 1700              	.LBE83:
 1701              	.LBE82:
 1702              		.loc 1 779 9
 1703 00a8 FB68     		ldr	r3, [r7, #12]
 1704 00aa 1B68     		ldr	r3, [r3]
 1705 00ac 1A68     		ldr	r2, [r3]
 1706 00ae FB68     		ldr	r3, [r7, #12]
 1707 00b0 1B68     		ldr	r3, [r3]
 1708 00b2 1021     		movs	r1, #16
 1709 00b4 0A43     		orrs	r2, r1
 1710 00b6 1A60     		str	r2, [r3]
 1711 00b8 3B6A     		ldr	r3, [r7, #32]
 1712 00ba FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 52


 1713              	.LBB84:
 1714              	.LBB85:
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1715              		.loc 2 414 3
 1716 00bc FB69     		ldr	r3, [r7, #28]
 1717              		.syntax divided
 1718              	@ 414 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1719 00be 83F31088 		MSR primask, r3
 1720              	@ 0 "" 2
 1721              		.loc 2 415 1
 1722              		.thumb
 1723              		.syntax unified
 1724 00c2 03E0     		b	.L81
 1725              	.L82:
 1726              	.LBE85:
 1727              	.LBE84:
 1728              	.LBE79:
 780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       else
 782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       {
 783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         /* In case of errors already pending when reception is started,
 784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            Interrupts may have already been raised and lead to reception abortion.
 785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            (Overrun error for instance).
 786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
 787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****         status = HAL_ERROR;
 1729              		.loc 1 787 16
 1730 00c4 2723     		movs	r3, #39
 1731 00c6 FB18     		adds	r3, r7, r3
 1732 00c8 0122     		movs	r2, #1
 1733 00ca 1A70     		strb	r2, [r3]
 1734              	.L81:
 788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****       }
 789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     }
 790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return status;
 1735              		.loc 1 791 12
 1736 00cc 2723     		movs	r3, #39
 1737 00ce FB18     		adds	r3, r7, r3
 1738 00d0 1B78     		ldrb	r3, [r3]
 1739 00d2 00E0     		b	.L78
 1740              	.L75:
 792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   else
 794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   {
 795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****     return HAL_BUSY;
 1741              		.loc 1 795 12
 1742 00d4 0223     		movs	r3, #2
 1743              	.L78:
 796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   }
 797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 1744              		.loc 1 797 1
 1745 00d6 1800     		movs	r0, r3
 1746 00d8 BD46     		mov	sp, r7
 1747 00da 0AB0     		add	sp, sp, #40
 1748              		@ sp needed
 1749 00dc B0BD     		pop	{r4, r5, r7, pc}
 1750              		.cfi_endproc
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 53


 1751              	.LFE57:
 1753              		.section	.text.UARTEx_Wakeup_AddressConfig,"ax",%progbits
 1754              		.align	1
 1755              		.syntax unified
 1756              		.code	16
 1757              		.thumb_func
 1759              	UARTEx_Wakeup_AddressConfig:
 1760              	.LFB58:
 798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @}
 801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @}
 805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /** @addtogroup UARTEx_Private_Functions
 808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @{
 809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** /**
 812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @brief Initialize the UART wake-up from stop mode parameters when triggered by address detectio
 813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param huart           UART handle.
 814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @param WakeUpSelection UART wake up from stop mode parameters.
 815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   * @retval None
 816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   */
 817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelecti
 818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** {
 1761              		.loc 1 818 1
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 16
 1764              		@ frame_needed = 1, uses_anonymous_args = 0
 1765 0000 80B5     		push	{r7, lr}
 1766              	.LCFI33:
 1767              		.cfi_def_cfa_offset 8
 1768              		.cfi_offset 7, -8
 1769              		.cfi_offset 14, -4
 1770 0002 84B0     		sub	sp, sp, #16
 1771              	.LCFI34:
 1772              		.cfi_def_cfa_offset 24
 1773 0004 00AF     		add	r7, sp, #0
 1774              	.LCFI35:
 1775              		.cfi_def_cfa_register 7
 1776 0006 F860     		str	r0, [r7, #12]
 1777 0008 3B1D     		adds	r3, r7, #4
 1778 000a 1960     		str	r1, [r3]
 1779 000c 5A60     		str	r2, [r3, #4]
 819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));
 820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set the USART address length */
 822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 1780              		.loc 1 822 3
 1781 000e FB68     		ldr	r3, [r7, #12]
 1782 0010 1B68     		ldr	r3, [r3]
 1783 0012 5B68     		ldr	r3, [r3, #4]
 1784 0014 1022     		movs	r2, #16
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 54


 1785 0016 9343     		bics	r3, r2
 1786 0018 1A00     		movs	r2, r3
 1787 001a 3B1D     		adds	r3, r7, #4
 1788 001c 9B88     		ldrh	r3, [r3, #4]
 1789 001e 1900     		movs	r1, r3
 1790 0020 FB68     		ldr	r3, [r7, #12]
 1791 0022 1B68     		ldr	r3, [r3]
 1792 0024 0A43     		orrs	r2, r1
 1793 0026 5A60     		str	r2, [r3, #4]
 823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** 
 824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   /* Set the USART address node */
 825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_AD
 1794              		.loc 1 825 3
 1795 0028 FB68     		ldr	r3, [r7, #12]
 1796 002a 1B68     		ldr	r3, [r3]
 1797 002c 5B68     		ldr	r3, [r3, #4]
 1798 002e 1B02     		lsls	r3, r3, #8
 1799 0030 190A     		lsrs	r1, r3, #8
 1800 0032 3B1D     		adds	r3, r7, #4
 1801 0034 9B79     		ldrb	r3, [r3, #6]
 1802 0036 1A06     		lsls	r2, r3, #24
 1803 0038 FB68     		ldr	r3, [r7, #12]
 1804 003a 1B68     		ldr	r3, [r3]
 1805 003c 0A43     		orrs	r2, r1
 1806 003e 5A60     		str	r2, [r3, #4]
 826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c **** }
 1807              		.loc 1 826 1
 1808 0040 C046     		nop
 1809 0042 BD46     		mov	sp, r7
 1810 0044 04B0     		add	sp, sp, #16
 1811              		@ sp needed
 1812 0046 80BD     		pop	{r7, pc}
 1813              		.cfi_endproc
 1814              	.LFE58:
 1816              		.text
 1817              	.Letext0:
 1818              		.file 3 "d:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1819              		.file 4 "d:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1820              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l053xx.h"
 1821              		.file 6 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 1822              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 1823              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 1824              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 1825              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart_ex.h"
ARM GAS  C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l0xx_hal_uart_ex.c
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:18     .text.HAL_RS485Ex_Init:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:24     .text.HAL_RS485Ex_Init:00000000 HAL_RS485Ex_Init
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:175    .text.HAL_RS485Ex_Init:000000d8 $d
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:181    .text.HAL_UARTEx_WakeupCallback:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:187    .text.HAL_UARTEx_WakeupCallback:00000000 HAL_UARTEx_WakeupCallback
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:215    .text.HAL_UARTEx_EnableClockStopMode:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:221    .text.HAL_UARTEx_EnableClockStopMode:00000000 HAL_UARTEx_EnableClockStopMode
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:333    .text.HAL_UARTEx_DisableClockStopMode:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:339    .text.HAL_UARTEx_DisableClockStopMode:00000000 HAL_UARTEx_DisableClockStopMode
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:448    .text.HAL_UARTEx_DisableClockStopMode:00000064 $d
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:453    .text.HAL_MultiProcessorEx_AddressLength_Set:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:459    .text.HAL_MultiProcessorEx_AddressLength_Set:00000000 HAL_MultiProcessorEx_AddressLength_Set
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:536    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:542    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:00000000 HAL_UARTEx_StopModeWakeUpSourceConfig
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:1759   .text.UARTEx_Wakeup_AddressConfig:00000000 UARTEx_Wakeup_AddressConfig
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:678    .text.HAL_UARTEx_StopModeWakeUpSourceConfig:000000c4 $d
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:684    .text.HAL_UARTEx_EnableStopMode:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:690    .text.HAL_UARTEx_EnableStopMode:00000000 HAL_UARTEx_EnableStopMode
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:800    .text.HAL_UARTEx_DisableStopMode:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:806    .text.HAL_UARTEx_DisableStopMode:00000000 HAL_UARTEx_DisableStopMode
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:916    .text.HAL_UARTEx_ReceiveToIdle:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:922    .text.HAL_UARTEx_ReceiveToIdle:00000000 HAL_UARTEx_ReceiveToIdle
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:1339   .text.HAL_UARTEx_ReceiveToIdle:00000244 $d
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:1344   .text.HAL_UARTEx_ReceiveToIdle_IT:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:1350   .text.HAL_UARTEx_ReceiveToIdle_IT:00000000 HAL_UARTEx_ReceiveToIdle_IT
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:1549   .text.HAL_UARTEx_ReceiveToIdle_DMA:00000000 $t
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:1555   .text.HAL_UARTEx_ReceiveToIdle_DMA:00000000 HAL_UARTEx_ReceiveToIdle_DMA
C:\Users\lidka\AppData\Local\Temp\ccIncxo3.s:1754   .text.UARTEx_Wakeup_AddressConfig:00000000 $t

UNDEFINED SYMBOLS
HAL_UART_MspInit
UART_SetConfig
UART_AdvFeatureConfig
UART_CheckIdleState
HAL_GetTick
UART_WaitOnFlagUntilTimeout
UART_Start_Receive_IT
UART_Start_Receive_DMA
